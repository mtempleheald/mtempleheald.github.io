import{S as qs,i as Ds,s as _s,k as a,q as t,a as n,l,m as r,r as o,h as i,c,n as u,b as d,I as e,C as fl}from"../chunks/index.de0bb5b5.js";function Is(Es){let N,Tt,ht,A,Bt,St,Rt,At,Ot,dt,he,xt,ft,_,M,Le,Ft,Pt,Nt,Mt,Gt,G,Te,jt,Qt,Vt,Ht,Wt,j,Be,Kt,Ut,Jt,zt,Yt,C,Se,Xt,Zt,$t,eo,W,to,oo,K,io,ao,lo,de,Re,so,ro,pt,fe,no,mt,pe,co,bt,y,uo,U,ho,fo,J,po,mo,z,bo,go,Y,vo,Eo,wo,yo,gt,L,Ae,qo,Do,Oe,_o,Io,xe,ko,Co,Fe,Lo,vt,me,To,Et,Q,Bo,So,Ro,wt,q,Pe,Ao,Oo,be,X,xo,Fo,Po,ge,Z,No,Mo,Go,ve,$,jo,Qo,Vo,Ee,ee,Ho,Wo,Ko,we,te,Uo,Jo,yt,O,zo,oe,Yo,Xo,ie,Zo,$o,qt,ye,ei,Dt,T,ti,ae,oi,ii,ai,li,si,ri,_t,qe,ni,It,De,ci,kt,f,Ne,ui,hi,_e,di,Me,fi,pi,Ge,mi,bi,le,gi,je,vi,Ei,wi,g,yi,qi,Di,se,_i,Ii,ki,Ci,Qe,Li,Ti,Ve,Bi,Si,He,Ri,Ai,We,Oi,xi,Fi,Pi,Ni,I,Mi,Gi,ji,Ke,Qi,Vi,Hi,Wi,re,Ki,Ui,Ji,zi,w,Yi,Ue,Xi,Zi,Ie,ws=`<code class="language-undefined">classpath: /liquibase/changelog
changeLogFile: changelog.xml
url: jdbc:sqlserver://localhost:1433;database=master;encrypt=true;trustServerCertificate=true
username: sa
password: yourStrong(!)Password
# liquibaseProLicenseKey=&lt;PASTE LB PRO LICENSE KEY HERE&gt;</code>`,$i,ne,ea,ta,ce,oa,ia,aa,la,Je,sa,ra,na,p,ca,ua,ha,ze,da,fa,pa,Ye,ma,ba,ga,va,Xe,Ea,wa,ya,qa,Ze,Da,_a,Ia,ka,$e,Ca,La,Ta,Ba,et,Sa,Ra,Aa,v,Oa,xa,Fa,tt,Pa,Na,Ma,ot,Ga,ja,Qa,it,Va,Ha,at,Wa,Ka,Ua,Ja,za,x,Ya,Xa,Za,lt,$a,el,tl,ol,st,il,al,rt,ll;return{c(){N=a("h1"),Tt=t("Publish Database from ERD"),ht=n(),A=a("p"),Bt=t("I’m focusing here only on a relational database, typically a suitable choice for my use cases."),St=a("br"),Rt=t(`
I often find that blogs/tutorials/demos always skip over the data aspect of solutions.`),At=a("br"),Ot=t(`
In my experience managing code is easy, managing data is hard.  Unless your data is transient in nature database changes require careful thought.`),dt=n(),he=a("p"),xt=t("My key requirements in an effective data design strategy are:"),ft=n(),_=a("ol"),M=a("li"),Le=a("strong"),Ft=t("Visualisation"),Pt=t(" - I want to see an ERD or something similar, without this understanding a non-trivial database is going to be hard."),Nt=a("br"),Mt=t(`
This needs to be versioned with the code, which rules out Visio and other binary representations.`),Gt=n(),G=a("li"),Te=a("strong"),jt=t("Automation"),Qt=t(" - The ERD and the production database should be linked via automated means."),Vt=a("br"),Ht=t(`
Out-of-date documentation is sometimes worse than no documentation at all.
This rules out EF Core migrations (even if not using EF Core for production code).`),Wt=n(),j=a("li"),Be=a("strong"),Kt=t("Testability"),Ut=t(" - Not so much a feature of the database, but I need to know that DB changes do not break things."),Jt=a("br"),zt=t(`
This means that integration tests must use the real database, on the same version as production, also during local dev, which leads me towards Docker.`),Yt=n(),C=a("li"),Se=a("strong"),Xt=t("Provider-agnostic"),Zt=t(" - I have seen what vendor lock-in leads to and I don’t like it, we must maintain control of our applications."),$t=a("br"),eo=t(`
In reality it is impossible to avoid this completely, but simple things like adhering to `),W=a("a"),to=t("SQL Standards"),oo=t(` can help reduce the impact of migration.  I only want tables, indexes, constraints and possibly views, all logic will be in the application code.
This requirement rules out SSDT and `),K=a("a"),io=t("DACPAC"),ao=t(" deployment which is great, but only for SQL Server."),lo=n(),de=a("li"),Re=a("strong"),so=t("Maintainability"),ro=t(" - the solution needs to be simple to use in the medium to long term, though not necessarily simple to set up."),pt=n(),fe=a("p"),no=t("This mini project is something I’ve been meaning to do for years, since I built an Oracle DB deployment tool in Go and subsequently discovered DACPAC deployment in SQL Server."),mt=n(),pe=a("h2"),co=t("Visualisation"),bt=n(),y=a("p"),uo=t("I considered various options, including Microsoft Visio, "),U=a("a"),ho=t("Mermaid"),fo=t(", "),J=a("a"),po=t("dbdiagram.io"),mo=t(", "),z=a("a"),bo=t("Structurizr"),go=t(" to generate Mermaid diagrams, but eventually settled on "),Y=a("a"),vo=t("ERD Editor"),Eo=t(" for VS Code."),wo=a("br"),yo=t(`
I came to this decision because:`),gt=n(),L=a("ul"),Ae=a("li"),qo=t("It is free & open source, so even if it was taken offline and destroyed I could invest some time and recover to my forked version"),Do=n(),Oe=a("li"),_o=t("It is offline, meaning that any sensitive data models are kept secure"),Io=n(),xe=a("li"),ko=t("It is stored in text/json format, not binary, which makes version control in git tenable"),Co=n(),Fe=a("li"),Lo=t("It has a feature to output liquibase changelogs built in"),vt=n(),me=a("h2"),To=t("Automation"),Et=n(),Q=a("p"),Bo=t("Most DB automation tools are either prohibitively expensive, or vendor-specific."),So=a("br"),Ro=t(`
I considered various options for automation, including:`),wt=n(),q=a("ul"),Pe=a("li"),Ao=t("Enhancing my old Go based solution for Oracle DBs, but I don’t have the code, only the design principles, so effectively this would be a fresh start."),Oo=n(),be=a("li"),X=a("a"),xo=t("SSDT (DACPAC publish)"),Fo=t(", but this is SQL Server specific."),Po=n(),ge=a("li"),Z=a("a"),No=t("EF Migrations"),Mo=t(", but this doesn’t work with visualisation tools AFAIK and I don’t want to be tied to EF Core, since it is .NET only."),Go=n(),ve=a("li"),$=a("a"),jo=t("Redgate Tools"),Qo=t(" but I assume this is too expensive since they don’t list the price on their website."),Vo=n(),Ee=a("li"),ee=a("a"),Ho=t("Fluent Migrator"),Wo=t(" but again this is .NET-specific, I don’t see a benefit over EF Core."),Ko=n(),we=a("li"),te=a("a"),Uo=t("Roundhouse"),Jo=t(" but again this is .NET-specific, it also seems to be poorly maintained although I do like the convention-over-configuration approach at a glance"),yt=n(),O=a("p"),zo=t("I eventually settled on "),oe=a("a"),Yo=t("Liquibase"),Xo=t(" because it has a free and open source option (Apache-2.0 licensed), supports Docker, is clearly built to support CI/CD with documented "),ie=a("a"),Zo=t("Open Source Workflows"),$o=t(" and, crucially, it works with the visualisation tool I’ve selected."),qt=n(),ye=a("h2"),ei=t("Testability"),Dt=n(),T=a("p"),ti=t("The prompt for this mini-project was the discovery of "),ae=a("a"),oi=t("Testcontainers"),ii=t(" (via Nick Chapsas on Youtube)."),ai=a("br"),li=t(`
This allows you to spin up a throwaway docker container, or collection of, just for the lifetime of the test(s).`),si=a("br"),ri=t(`
This is not a substitute for unit testing since it will be significantly slower, but it is a better solution than testing with in-memory databases, which may have subtle differences in behaviour to the production database.`),_t=n(),qe=a("p"),ni=t("I’m still working through the details of this in relation to the DB schema automation, but I’ve done enough to be convinced that it is viable."),It=n(),De=a("h2"),ci=t("The solution"),kt=n(),f=a("ol"),Ne=a("li"),ui=t("Install Docker (and optionally Docker Desktop, if licencing allows)"),hi=n(),_e=a("li"),di=t("Get latest liquibase image "),Me=a("code"),fi=t("docker pull liquibase/liquibase"),pi=n(),Ge=a("li"),mi=t("Install VS Code extension “ERD Editor” (vuerd)"),bi=n(),le=a("li"),gi=t("Create an ERD file "),je=a("code"),vi=t("<name>.vuerd.json"),Ei=t(" within the project/solution/workspace"),wi=n(),g=a("li"),yi=t("Create a DB model, be sure not to deselect Postgres as the output regardless of target DB type, required for Liquibase support"),qi=a("br"),Di=t(`
Be careful here to use appropriate data types for the target environment, `),se=a("a"),_i=t("ERD Editor supported types"),Ii=t("."),ki=a("br"),Ci=t(`
The tool is clever enough to convert from `),Qe=a("code"),Li=t("uuid"),Ti=t(" to "),Ve=a("code"),Bi=t("uniqueidentifier"),Si=t(", but not clever enough to convert from "),He=a("code"),Ri=t("varchar"),Ai=t(" to "),We=a("code"),Oi=t("varchar2"),xi=t(" for example and certainly not when lengths are included (which they need to be since the default is 1 character)."),Fi=a("br"),Pi=t(`
Effectively I’d advise making multiple DB models if supporting multiple DB providers, but decide which is master, copy/paste, find/replace in JSON files to keep multiple versions in sync and versioned together (this is why models should be stored in text format).`),Ni=n(),I=a("li"),Mi=t("Generate a Liquibase changeset by right clicking the model and selecting Export > Liquibase"),Gi=a("br"),ji=t(`
Use the naming convention `),Ke=a("em"),Qi=t("changeset-###"),Vi=t(", 999 DB changes should be enough for most projects."),Hi=a("br"),Wi=t(`
Liquibase uses the id, author and filename to track changes - `),re=a("a"),Ki=t("How Liquibase works"),Ui=a("br"),Ji=t(`
Keep the changelogs alongside the ERD model in source code, this lets ERD Editor load older changelogs to guarantee correct generation of new changelogs.`),zi=n(),w=a("li"),Yi=t("Configure liquibase using a "),Ue=a("em"),Xi=t("liquibase.properties"),Zi=t(" file in the same folder  "),Ie=a("pre"),$i=t("This example is using the defaults for a "),ne=a("a"),ea=t("SQL Server docker"),ta=t(" container, although the "),ce=a("a"),oa=t("Liquibase recommendation"),ia=t(" is to pass these as arguments.  This may be required for running multiple test sets in parallel since only one Docker container at a time can respond on a given port, even if we reuse credentials for testing."),aa=a("br"),la=t(`
We require `),Je=a("code"),sa=t("encrypt=true and trustServerCertificate=true"),ra=t(" to resolve firewall and SSL errors respectively, encountered whilst applying changeset."),na=n(),p=a("li"),ca=t("We can now run liquibase commands, e.g. help"),ua=a("br"),ha=n(),ze=a("code"),da=t('docker run --rm --net=host -v "C:\\Path\\To\\Folder\\Containing\\changelogs":/liquibase/changelog liquibase/liquibase --defaultsFile=/liquibase/changelog/liquibase.properties --help'),fa=a("br"),pa=n(),Ye=a("code"),ma=t("--rm"),ba=t(" ensures that the docker container is removed after completion of the script (see debugging)"),ga=a("br"),va=n(),Xe=a("code"),Ea=t("-net=host"),wa=t(" ensures that the liquibase container can talk outside of the Docker bridge network (e.g. to connect to a Docker hosted DB)."),ya=a("br"),qa=n(),Ze=a("code"),Da=t("-v"),_a=t(" maps our local folder (Windows in this example) to the root of Liquibase’s changelog tree volume."),Ia=a("br"),ka=n(),$e=a("code"),Ca=t("--defaultsFile"),La=t(" tells Liquibase to use our properties file, which in turn tells it where to find changelogs and how to connect to the DB."),Ta=a("br"),Ba=n(),et=a("code"),Sa=t("--help"),Ra=t(" tells Liquibase to show us its help documentation, including available commands"),Aa=n(),v=a("li"),Oa=t("Debugging - if any of our commands fail we can investigate by launching Liquibase with a built-in in-memory DB:"),xa=a("br"),Fa=n(),tt=a("code"),Pa=t('docker run --net=host -v "C:\\Path\\To\\Folder\\Containing\\changelogs":/liquibase/changelog liquibase/liquibase --defaultsFile=/liquibase/changelog/liquibase.properties init start-h2'),Na=a("br"),Ma=t(`
In a separate command window find the running container using `),ot=a("code"),Ga=t("docker ps"),ja=a("br"),Qa=t(`
Jump inside it using `),it=a("code"),Va=t("docker exec -it <container_id> bash"),Ha=t(", you should see your files within "),at=a("code"),Wa=t("/changelog From here you can run the same commands (everything after liquibase/liquibase) on top of liquibase directly, e.g. "),Ka=t("liquibase –help`"),Ua=a("br"),Ja=t(`
When done you will need to stop and remove the docker container yourself.`),za=n(),x=a("li"),Ya=t("Apply the changeset to the database (dbo schema is default for SQL Server)"),Xa=a("br"),Za=n(),lt=a("code"),$a=t('docker run --rm --net=host -v "C:\\Path\\To\\Folder\\Containing\\changelogs":/liquibase/changelog liquibase/liquibase --defaultsFile=/liquibase/changelog/liquibase.properties update --changelog-file=changeset-001.xml --default-schema-name=dbo'),el=a("br"),tl=t(`
If a changeset fails in dev, perhaps due to messing up constraints :|, and you wish to keep changesets clean before commit, you can truncate the table DATABASECHANGELOG which Liquibase manages.`),ol=n(),st=a("li"),il=t("TODO - automate DB spinup for tests, applying all changesets in numeric order"),al=n(),rt=a("li"),ll=t("TODO - automate integration testing on CICD pipelines (out of scope of this document)"),this.h()},l(s){N=l(s,"H1",{});var h=r(N);Tt=o(h,"Publish Database from ERD"),h.forEach(i),ht=c(s),A=l(s,"P",{});var ke=r(A);Bt=o(ke,"I’m focusing here only on a relational database, typically a suitable choice for my use cases."),St=l(ke,"BR",{}),Rt=o(ke,`
I often find that blogs/tutorials/demos always skip over the data aspect of solutions.`),At=l(ke,"BR",{}),Ot=o(ke,`
In my experience managing code is easy, managing data is hard.  Unless your data is transient in nature database changes require careful thought.`),ke.forEach(i),dt=c(s),he=l(s,"P",{});var pl=r(he);xt=o(pl,"My key requirements in an effective data design strategy are:"),pl.forEach(i),ft=c(s),_=l(s,"OL",{});var F=r(_);M=l(F,"LI",{});var nt=r(M);Le=l(nt,"STRONG",{});var ml=r(Le);Ft=o(ml,"Visualisation"),ml.forEach(i),Pt=o(nt," - I want to see an ERD or something similar, without this understanding a non-trivial database is going to be hard."),Nt=l(nt,"BR",{}),Mt=o(nt,`
This needs to be versioned with the code, which rules out Visio and other binary representations.`),nt.forEach(i),Gt=c(F),G=l(F,"LI",{});var ct=r(G);Te=l(ct,"STRONG",{});var bl=r(Te);jt=o(bl,"Automation"),bl.forEach(i),Qt=o(ct," - The ERD and the production database should be linked via automated means."),Vt=l(ct,"BR",{}),Ht=o(ct,`
Out-of-date documentation is sometimes worse than no documentation at all.
This rules out EF Core migrations (even if not using EF Core for production code).`),ct.forEach(i),Wt=c(F),j=l(F,"LI",{});var ut=r(j);Be=l(ut,"STRONG",{});var gl=r(Be);Kt=o(gl,"Testability"),gl.forEach(i),Ut=o(ut," - Not so much a feature of the database, but I need to know that DB changes do not break things."),Jt=l(ut,"BR",{}),zt=o(ut,`
This means that integration tests must use the real database, on the same version as production, also during local dev, which leads me towards Docker.`),ut.forEach(i),Yt=c(F),C=l(F,"LI",{});var P=r(C);Se=l(P,"STRONG",{});var vl=r(Se);Xt=o(vl,"Provider-agnostic"),vl.forEach(i),Zt=o(P," - I have seen what vendor lock-in leads to and I don’t like it, we must maintain control of our applications."),$t=l(P,"BR",{}),eo=o(P,`
In reality it is impossible to avoid this completely, but simple things like adhering to `),W=l(P,"A",{href:!0,rel:!0});var El=r(W);to=o(El,"SQL Standards"),El.forEach(i),oo=o(P,` can help reduce the impact of migration.  I only want tables, indexes, constraints and possibly views, all logic will be in the application code.
This requirement rules out SSDT and `),K=l(P,"A",{href:!0,rel:!0});var wl=r(K);io=o(wl,"DACPAC"),wl.forEach(i),ao=o(P," deployment which is great, but only for SQL Server."),P.forEach(i),lo=c(F),de=l(F,"LI",{});var sl=r(de);Re=l(sl,"STRONG",{});var yl=r(Re);so=o(yl,"Maintainability"),yl.forEach(i),ro=o(sl," - the solution needs to be simple to use in the medium to long term, though not necessarily simple to set up."),sl.forEach(i),F.forEach(i),pt=c(s),fe=l(s,"P",{});var ql=r(fe);no=o(ql,"This mini project is something I’ve been meaning to do for years, since I built an Oracle DB deployment tool in Go and subsequently discovered DACPAC deployment in SQL Server."),ql.forEach(i),mt=c(s),pe=l(s,"H2",{});var Dl=r(pe);co=o(Dl,"Visualisation"),Dl.forEach(i),bt=c(s),y=l(s,"P",{});var B=r(y);uo=o(B,"I considered various options, including Microsoft Visio, "),U=l(B,"A",{href:!0,rel:!0});var _l=r(U);ho=o(_l,"Mermaid"),_l.forEach(i),fo=o(B,", "),J=l(B,"A",{href:!0,rel:!0});var Il=r(J);po=o(Il,"dbdiagram.io"),Il.forEach(i),mo=o(B,", "),z=l(B,"A",{href:!0,rel:!0});var kl=r(z);bo=o(kl,"Structurizr"),kl.forEach(i),go=o(B," to generate Mermaid diagrams, but eventually settled on "),Y=l(B,"A",{href:!0,rel:!0});var Cl=r(Y);vo=o(Cl,"ERD Editor"),Cl.forEach(i),Eo=o(B," for VS Code."),wo=l(B,"BR",{}),yo=o(B,`
I came to this decision because:`),B.forEach(i),gt=c(s),L=l(s,"UL",{});var V=r(L);Ae=l(V,"LI",{});var Ll=r(Ae);qo=o(Ll,"It is free & open source, so even if it was taken offline and destroyed I could invest some time and recover to my forked version"),Ll.forEach(i),Do=c(V),Oe=l(V,"LI",{});var Tl=r(Oe);_o=o(Tl,"It is offline, meaning that any sensitive data models are kept secure"),Tl.forEach(i),Io=c(V),xe=l(V,"LI",{});var Bl=r(xe);ko=o(Bl,"It is stored in text/json format, not binary, which makes version control in git tenable"),Bl.forEach(i),Co=c(V),Fe=l(V,"LI",{});var Sl=r(Fe);Lo=o(Sl,"It has a feature to output liquibase changelogs built in"),Sl.forEach(i),V.forEach(i),vt=c(s),me=l(s,"H2",{});var Rl=r(me);To=o(Rl,"Automation"),Rl.forEach(i),Et=c(s),Q=l(s,"P",{});var Ct=r(Q);Bo=o(Ct,"Most DB automation tools are either prohibitively expensive, or vendor-specific."),So=l(Ct,"BR",{}),Ro=o(Ct,`
I considered various options for automation, including:`),Ct.forEach(i),wt=c(s),q=l(s,"UL",{});var S=r(q);Pe=l(S,"LI",{});var Al=r(Pe);Ao=o(Al,"Enhancing my old Go based solution for Oracle DBs, but I don’t have the code, only the design principles, so effectively this would be a fresh start."),Al.forEach(i),Oo=c(S),be=l(S,"LI",{});var rl=r(be);X=l(rl,"A",{href:!0,rel:!0});var Ol=r(X);xo=o(Ol,"SSDT (DACPAC publish)"),Ol.forEach(i),Fo=o(rl,", but this is SQL Server specific."),rl.forEach(i),Po=c(S),ge=l(S,"LI",{});var nl=r(ge);Z=l(nl,"A",{href:!0,rel:!0});var xl=r(Z);No=o(xl,"EF Migrations"),xl.forEach(i),Mo=o(nl,", but this doesn’t work with visualisation tools AFAIK and I don’t want to be tied to EF Core, since it is .NET only."),nl.forEach(i),Go=c(S),ve=l(S,"LI",{});var cl=r(ve);$=l(cl,"A",{href:!0,rel:!0});var Fl=r($);jo=o(Fl,"Redgate Tools"),Fl.forEach(i),Qo=o(cl," but I assume this is too expensive since they don’t list the price on their website."),cl.forEach(i),Vo=c(S),Ee=l(S,"LI",{});var ul=r(Ee);ee=l(ul,"A",{href:!0,rel:!0});var Pl=r(ee);Ho=o(Pl,"Fluent Migrator"),Pl.forEach(i),Wo=o(ul," but again this is .NET-specific, I don’t see a benefit over EF Core."),ul.forEach(i),Ko=c(S),we=l(S,"LI",{});var hl=r(we);te=l(hl,"A",{href:!0,rel:!0});var Nl=r(te);Uo=o(Nl,"Roundhouse"),Nl.forEach(i),Jo=o(hl," but again this is .NET-specific, it also seems to be poorly maintained although I do like the convention-over-configuration approach at a glance"),hl.forEach(i),S.forEach(i),yt=c(s),O=l(s,"P",{});var Ce=r(O);zo=o(Ce,"I eventually settled on "),oe=l(Ce,"A",{href:!0,rel:!0});var Ml=r(oe);Yo=o(Ml,"Liquibase"),Ml.forEach(i),Xo=o(Ce," because it has a free and open source option (Apache-2.0 licensed), supports Docker, is clearly built to support CI/CD with documented "),ie=l(Ce,"A",{href:!0,rel:!0});var Gl=r(ie);Zo=o(Gl,"Open Source Workflows"),Gl.forEach(i),$o=o(Ce," and, crucially, it works with the visualisation tool I’ve selected."),Ce.forEach(i),qt=c(s),ye=l(s,"H2",{});var jl=r(ye);ei=o(jl,"Testability"),jl.forEach(i),Dt=c(s),T=l(s,"P",{});var H=r(T);ti=o(H,"The prompt for this mini-project was the discovery of "),ae=l(H,"A",{href:!0,rel:!0});var Ql=r(ae);oi=o(Ql,"Testcontainers"),Ql.forEach(i),ii=o(H," (via Nick Chapsas on Youtube)."),ai=l(H,"BR",{}),li=o(H,`
This allows you to spin up a throwaway docker container, or collection of, just for the lifetime of the test(s).`),si=l(H,"BR",{}),ri=o(H,`
This is not a substitute for unit testing since it will be significantly slower, but it is a better solution than testing with in-memory databases, which may have subtle differences in behaviour to the production database.`),H.forEach(i),_t=c(s),qe=l(s,"P",{});var Vl=r(qe);ni=o(Vl,"I’m still working through the details of this in relation to the DB schema automation, but I’ve done enough to be convinced that it is viable."),Vl.forEach(i),It=c(s),De=l(s,"H2",{});var Hl=r(De);ci=o(Hl,"The solution"),Hl.forEach(i),kt=c(s),f=l(s,"OL",{});var b=r(f);Ne=l(b,"LI",{});var Wl=r(Ne);ui=o(Wl,"Install Docker (and optionally Docker Desktop, if licencing allows)"),Wl.forEach(i),hi=c(b),_e=l(b,"LI",{});var dl=r(_e);di=o(dl,"Get latest liquibase image "),Me=l(dl,"CODE",{});var Kl=r(Me);fi=o(Kl,"docker pull liquibase/liquibase"),Kl.forEach(i),dl.forEach(i),pi=c(b),Ge=l(b,"LI",{});var Ul=r(Ge);mi=o(Ul,"Install VS Code extension “ERD Editor” (vuerd)"),Ul.forEach(i),bi=c(b),le=l(b,"LI",{});var Lt=r(le);gi=o(Lt,"Create an ERD file "),je=l(Lt,"CODE",{});var Jl=r(je);vi=o(Jl,"<name>.vuerd.json"),Jl.forEach(i),Ei=o(Lt," within the project/solution/workspace"),Lt.forEach(i),wi=c(b),g=l(b,"LI",{});var E=r(g);yi=o(E,"Create a DB model, be sure not to deselect Postgres as the output regardless of target DB type, required for Liquibase support"),qi=l(E,"BR",{}),Di=o(E,`
Be careful here to use appropriate data types for the target environment, `),se=l(E,"A",{href:!0,rel:!0});var zl=r(se);_i=o(zl,"ERD Editor supported types"),zl.forEach(i),Ii=o(E,"."),ki=l(E,"BR",{}),Ci=o(E,`
The tool is clever enough to convert from `),Qe=l(E,"CODE",{});var Yl=r(Qe);Li=o(Yl,"uuid"),Yl.forEach(i),Ti=o(E," to "),Ve=l(E,"CODE",{});var Xl=r(Ve);Bi=o(Xl,"uniqueidentifier"),Xl.forEach(i),Si=o(E,", but not clever enough to convert from "),He=l(E,"CODE",{});var Zl=r(He);Ri=o(Zl,"varchar"),Zl.forEach(i),Ai=o(E," to "),We=l(E,"CODE",{});var $l=r(We);Oi=o($l,"varchar2"),$l.forEach(i),xi=o(E," for example and certainly not when lengths are included (which they need to be since the default is 1 character)."),Fi=l(E,"BR",{}),Pi=o(E,`
Effectively I’d advise making multiple DB models if supporting multiple DB providers, but decide which is master, copy/paste, find/replace in JSON files to keep multiple versions in sync and versioned together (this is why models should be stored in text format).`),E.forEach(i),Ni=c(b),I=l(b,"LI",{});var R=r(I);Mi=o(R,"Generate a Liquibase changeset by right clicking the model and selecting Export > Liquibase"),Gi=l(R,"BR",{}),ji=o(R,`
Use the naming convention `),Ke=l(R,"EM",{});var es=r(Ke);Qi=o(es,"changeset-###"),es.forEach(i),Vi=o(R,", 999 DB changes should be enough for most projects."),Hi=l(R,"BR",{}),Wi=o(R,`
Liquibase uses the id, author and filename to track changes - `),re=l(R,"A",{href:!0,rel:!0});var ts=r(re);Ki=o(ts,"How Liquibase works"),ts.forEach(i),Ui=l(R,"BR",{}),Ji=o(R,`
Keep the changelogs alongside the ERD model in source code, this lets ERD Editor load older changelogs to guarantee correct generation of new changelogs.`),R.forEach(i),zi=c(b),w=l(b,"LI",{});var k=r(w);Yi=o(k,"Configure liquibase using a "),Ue=l(k,"EM",{});var os=r(Ue);Xi=o(os,"liquibase.properties"),os.forEach(i),Zi=o(k," file in the same folder  "),Ie=l(k,"PRE",{class:!0});var ys=r(Ie);ys.forEach(i),$i=o(k,"This example is using the defaults for a "),ne=l(k,"A",{href:!0,rel:!0});var is=r(ne);ea=o(is,"SQL Server docker"),is.forEach(i),ta=o(k," container, although the "),ce=l(k,"A",{href:!0,rel:!0});var as=r(ce);oa=o(as,"Liquibase recommendation"),as.forEach(i),ia=o(k," is to pass these as arguments.  This may be required for running multiple test sets in parallel since only one Docker container at a time can respond on a given port, even if we reuse credentials for testing."),aa=l(k,"BR",{}),la=o(k,`
We require `),Je=l(k,"CODE",{});var ls=r(Je);sa=o(ls,"encrypt=true and trustServerCertificate=true"),ls.forEach(i),ra=o(k," to resolve firewall and SSL errors respectively, encountered whilst applying changeset."),k.forEach(i),na=c(b),p=l(b,"LI",{});var m=r(p);ca=o(m,"We can now run liquibase commands, e.g. help"),ua=l(m,"BR",{}),ha=c(m),ze=l(m,"CODE",{});var ss=r(ze);da=o(ss,'docker run --rm --net=host -v "C:\\Path\\To\\Folder\\Containing\\changelogs":/liquibase/changelog liquibase/liquibase --defaultsFile=/liquibase/changelog/liquibase.properties --help'),ss.forEach(i),fa=l(m,"BR",{}),pa=c(m),Ye=l(m,"CODE",{});var rs=r(Ye);ma=o(rs,"--rm"),rs.forEach(i),ba=o(m," ensures that the docker container is removed after completion of the script (see debugging)"),ga=l(m,"BR",{}),va=c(m),Xe=l(m,"CODE",{});var ns=r(Xe);Ea=o(ns,"-net=host"),ns.forEach(i),wa=o(m," ensures that the liquibase container can talk outside of the Docker bridge network (e.g. to connect to a Docker hosted DB)."),ya=l(m,"BR",{}),qa=c(m),Ze=l(m,"CODE",{});var cs=r(Ze);Da=o(cs,"-v"),cs.forEach(i),_a=o(m," maps our local folder (Windows in this example) to the root of Liquibase’s changelog tree volume."),Ia=l(m,"BR",{}),ka=c(m),$e=l(m,"CODE",{});var us=r($e);Ca=o(us,"--defaultsFile"),us.forEach(i),La=o(m," tells Liquibase to use our properties file, which in turn tells it where to find changelogs and how to connect to the DB."),Ta=l(m,"BR",{}),Ba=c(m),et=l(m,"CODE",{});var hs=r(et);Sa=o(hs,"--help"),hs.forEach(i),Ra=o(m," tells Liquibase to show us its help documentation, including available commands"),m.forEach(i),Aa=c(b),v=l(b,"LI",{});var D=r(v);Oa=o(D,"Debugging - if any of our commands fail we can investigate by launching Liquibase with a built-in in-memory DB:"),xa=l(D,"BR",{}),Fa=c(D),tt=l(D,"CODE",{});var ds=r(tt);Pa=o(ds,'docker run --net=host -v "C:\\Path\\To\\Folder\\Containing\\changelogs":/liquibase/changelog liquibase/liquibase --defaultsFile=/liquibase/changelog/liquibase.properties init start-h2'),ds.forEach(i),Na=l(D,"BR",{}),Ma=o(D,`
In a separate command window find the running container using `),ot=l(D,"CODE",{});var fs=r(ot);Ga=o(fs,"docker ps"),fs.forEach(i),ja=l(D,"BR",{}),Qa=o(D,`
Jump inside it using `),it=l(D,"CODE",{});var ps=r(it);Va=o(ps,"docker exec -it <container_id> bash"),ps.forEach(i),Ha=o(D,", you should see your files within "),at=l(D,"CODE",{});var ms=r(at);Wa=o(ms,"/changelog From here you can run the same commands (everything after liquibase/liquibase) on top of liquibase directly, e.g. "),ms.forEach(i),Ka=o(D,"liquibase –help`"),Ua=l(D,"BR",{}),Ja=o(D,`
When done you will need to stop and remove the docker container yourself.`),D.forEach(i),za=c(b),x=l(b,"LI",{});var ue=r(x);Ya=o(ue,"Apply the changeset to the database (dbo schema is default for SQL Server)"),Xa=l(ue,"BR",{}),Za=c(ue),lt=l(ue,"CODE",{});var bs=r(lt);$a=o(bs,'docker run --rm --net=host -v "C:\\Path\\To\\Folder\\Containing\\changelogs":/liquibase/changelog liquibase/liquibase --defaultsFile=/liquibase/changelog/liquibase.properties update --changelog-file=changeset-001.xml --default-schema-name=dbo'),bs.forEach(i),el=l(ue,"BR",{}),tl=o(ue,`
If a changeset fails in dev, perhaps due to messing up constraints :|, and you wish to keep changesets clean before commit, you can truncate the table DATABASECHANGELOG which Liquibase manages.`),ue.forEach(i),ol=c(b),st=l(b,"LI",{});var gs=r(st);il=o(gs,"TODO - automate DB spinup for tests, applying all changesets in numeric order"),gs.forEach(i),al=c(b),rt=l(b,"LI",{});var vs=r(rt);ll=o(vs,"TODO - automate integration testing on CICD pipelines (out of scope of this document)"),vs.forEach(i),b.forEach(i),this.h()},h(){u(W,"href","https://learnsql.com/blog/history-of-sql-standards/"),u(W,"rel","nofollow"),u(K,"href","https://github.com/microsoft/DacFx"),u(K,"rel","nofollow"),u(U,"href","https://mermaid.js.org/syntax/entityRelationshipDiagram.html"),u(U,"rel","nofollow"),u(J,"href","https://dbdiagram.io/home/"),u(J,"rel","nofollow"),u(z,"href","https://structurizr.com/dsl?example=getting-started"),u(z,"rel","nofollow"),u(Y,"href","https://marketplace.visualstudio.com/items?itemName=dineug.vuerd-vscode"),u(Y,"rel","nofollow"),u(X,"href","https://learn.microsoft.com/en-us/sql/ssdt/extract-publish-and-register-dacpac-files?view=sql-server-ver16"),u(X,"rel","nofollow"),u(Z,"href","https://learn.microsoft.com/en-us/ef/core/managing-schemas/migrations/?tabs=dotnet-core-cli"),u(Z,"rel","nofollow"),u($,"href","https://www.red-gate.com/solutions/need/automate"),u($,"rel","nofollow"),u(ee,"href","https://fluentmigrator.github.io"),u(ee,"rel","nofollow"),u(te,"href","https://github.com/chucknorris/roundhouse/wiki"),u(te,"rel","nofollow"),u(oe,"href","https://www.liquibase.com/download"),u(oe,"rel","nofollow"),u(ie,"href","https://docs.liquibase.com/workflows/liquibase-community/home.html"),u(ie,"rel","nofollow"),u(ae,"href","https://github.com/testcontainers"),u(ae,"rel","nofollow"),u(se,"href","https://github.com/dineug/erd-editor/blob/master/packages/sql-ddl-parser/src/SQL_DDL_Test_Case.md"),u(se,"rel","nofollow"),u(re,"href","https://www.liquibase.com/how-liquibase-works"),u(re,"rel","nofollow"),u(Ie,"class","language-undefined"),u(ne,"href","https://hub.docker.com/_/microsoft-mssql-server"),u(ne,"rel","nofollow"),u(ce,"href","https://docs.liquibase.com/workflows/liquibase-community/using-liquibase-and-docker.html"),u(ce,"rel","nofollow")},m(s,h){d(s,N,h),e(N,Tt),d(s,ht,h),d(s,A,h),e(A,Bt),e(A,St),e(A,Rt),e(A,At),e(A,Ot),d(s,dt,h),d(s,he,h),e(he,xt),d(s,ft,h),d(s,_,h),e(_,M),e(M,Le),e(Le,Ft),e(M,Pt),e(M,Nt),e(M,Mt),e(_,Gt),e(_,G),e(G,Te),e(Te,jt),e(G,Qt),e(G,Vt),e(G,Ht),e(_,Wt),e(_,j),e(j,Be),e(Be,Kt),e(j,Ut),e(j,Jt),e(j,zt),e(_,Yt),e(_,C),e(C,Se),e(Se,Xt),e(C,Zt),e(C,$t),e(C,eo),e(C,W),e(W,to),e(C,oo),e(C,K),e(K,io),e(C,ao),e(_,lo),e(_,de),e(de,Re),e(Re,so),e(de,ro),d(s,pt,h),d(s,fe,h),e(fe,no),d(s,mt,h),d(s,pe,h),e(pe,co),d(s,bt,h),d(s,y,h),e(y,uo),e(y,U),e(U,ho),e(y,fo),e(y,J),e(J,po),e(y,mo),e(y,z),e(z,bo),e(y,go),e(y,Y),e(Y,vo),e(y,Eo),e(y,wo),e(y,yo),d(s,gt,h),d(s,L,h),e(L,Ae),e(Ae,qo),e(L,Do),e(L,Oe),e(Oe,_o),e(L,Io),e(L,xe),e(xe,ko),e(L,Co),e(L,Fe),e(Fe,Lo),d(s,vt,h),d(s,me,h),e(me,To),d(s,Et,h),d(s,Q,h),e(Q,Bo),e(Q,So),e(Q,Ro),d(s,wt,h),d(s,q,h),e(q,Pe),e(Pe,Ao),e(q,Oo),e(q,be),e(be,X),e(X,xo),e(be,Fo),e(q,Po),e(q,ge),e(ge,Z),e(Z,No),e(ge,Mo),e(q,Go),e(q,ve),e(ve,$),e($,jo),e(ve,Qo),e(q,Vo),e(q,Ee),e(Ee,ee),e(ee,Ho),e(Ee,Wo),e(q,Ko),e(q,we),e(we,te),e(te,Uo),e(we,Jo),d(s,yt,h),d(s,O,h),e(O,zo),e(O,oe),e(oe,Yo),e(O,Xo),e(O,ie),e(ie,Zo),e(O,$o),d(s,qt,h),d(s,ye,h),e(ye,ei),d(s,Dt,h),d(s,T,h),e(T,ti),e(T,ae),e(ae,oi),e(T,ii),e(T,ai),e(T,li),e(T,si),e(T,ri),d(s,_t,h),d(s,qe,h),e(qe,ni),d(s,It,h),d(s,De,h),e(De,ci),d(s,kt,h),d(s,f,h),e(f,Ne),e(Ne,ui),e(f,hi),e(f,_e),e(_e,di),e(_e,Me),e(Me,fi),e(f,pi),e(f,Ge),e(Ge,mi),e(f,bi),e(f,le),e(le,gi),e(le,je),e(je,vi),e(le,Ei),e(f,wi),e(f,g),e(g,yi),e(g,qi),e(g,Di),e(g,se),e(se,_i),e(g,Ii),e(g,ki),e(g,Ci),e(g,Qe),e(Qe,Li),e(g,Ti),e(g,Ve),e(Ve,Bi),e(g,Si),e(g,He),e(He,Ri),e(g,Ai),e(g,We),e(We,Oi),e(g,xi),e(g,Fi),e(g,Pi),e(f,Ni),e(f,I),e(I,Mi),e(I,Gi),e(I,ji),e(I,Ke),e(Ke,Qi),e(I,Vi),e(I,Hi),e(I,Wi),e(I,re),e(re,Ki),e(I,Ui),e(I,Ji),e(f,zi),e(f,w),e(w,Yi),e(w,Ue),e(Ue,Xi),e(w,Zi),e(w,Ie),Ie.innerHTML=ws,e(w,$i),e(w,ne),e(ne,ea),e(w,ta),e(w,ce),e(ce,oa),e(w,ia),e(w,aa),e(w,la),e(w,Je),e(Je,sa),e(w,ra),e(f,na),e(f,p),e(p,ca),e(p,ua),e(p,ha),e(p,ze),e(ze,da),e(p,fa),e(p,pa),e(p,Ye),e(Ye,ma),e(p,ba),e(p,ga),e(p,va),e(p,Xe),e(Xe,Ea),e(p,wa),e(p,ya),e(p,qa),e(p,Ze),e(Ze,Da),e(p,_a),e(p,Ia),e(p,ka),e(p,$e),e($e,Ca),e(p,La),e(p,Ta),e(p,Ba),e(p,et),e(et,Sa),e(p,Ra),e(f,Aa),e(f,v),e(v,Oa),e(v,xa),e(v,Fa),e(v,tt),e(tt,Pa),e(v,Na),e(v,Ma),e(v,ot),e(ot,Ga),e(v,ja),e(v,Qa),e(v,it),e(it,Va),e(v,Ha),e(v,at),e(at,Wa),e(v,Ka),e(v,Ua),e(v,Ja),e(f,za),e(f,x),e(x,Ya),e(x,Xa),e(x,Za),e(x,lt),e(lt,$a),e(x,el),e(x,tl),e(f,ol),e(f,st),e(st,il),e(f,al),e(f,rt),e(rt,ll)},p:fl,i:fl,o:fl,d(s){s&&i(N),s&&i(ht),s&&i(A),s&&i(dt),s&&i(he),s&&i(ft),s&&i(_),s&&i(pt),s&&i(fe),s&&i(mt),s&&i(pe),s&&i(bt),s&&i(y),s&&i(gt),s&&i(L),s&&i(vt),s&&i(me),s&&i(Et),s&&i(Q),s&&i(wt),s&&i(q),s&&i(yt),s&&i(O),s&&i(qt),s&&i(ye),s&&i(Dt),s&&i(T),s&&i(_t),s&&i(qe),s&&i(It),s&&i(De),s&&i(kt),s&&i(f)}}}class Cs extends qs{constructor(N){super(),Ds(this,N,null,Is,_s,{})}}export{Cs as default};
