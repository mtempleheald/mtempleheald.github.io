import{S as dc,i as hc,s as fc,k as a,q as t,a as r,l as s,m as n,r as o,h as i,c,n as h,b as d,I as e,C as kn}from"../chunks/index.de0bb5b5.js";function pc(oc){let z,Lo,to,Q,To,Ao,Bo,xo,Ro,oo,Le,Oo,io,k,X,tt,Fo,Po,Mo,Qo,No,N,ot,Wo,jo,Go,Ho,Vo,Uo,Ko,Z,it,Yo,Jo,zo,Xo,Zo,B,at,$o,ei,ti,oi,ae,ii,ai,se,si,li,ni,Te,st,ri,ci,ao,Ae,ui,so,Be,di,lo,q,hi,le,fi,pi,ne,mi,bi,re,gi,vi,ce,yi,Ei,wi,_i,no,x,lt,qi,Ii,nt,Di,Ci,rt,ki,Si,ct,Li,ro,xe,Ti,co,$,Ai,Bi,xi,uo,I,ut,Ri,Oi,Re,ue,Fi,Pi,Mi,Oe,de,Qi,Ni,Wi,Fe,he,ji,Gi,Hi,Pe,fe,Vi,Ui,Ki,Me,pe,Yi,Ji,ho,W,zi,me,Xi,Zi,be,$i,ea,fo,Qe,ta,po,R,oa,ge,ia,aa,sa,la,na,ra,mo,Ne,ca,bo,We,ua,go,je,da,vo,f,dt,ha,fa,ee,pa,ma,ba,ht,ga,va,Ge,ya,ft,Ea,wa,pt,_a,qa,ve,Ia,mt,Da,Ca,ka,g,Sa,La,Ta,ye,Aa,Ba,xa,Ra,bt,Oa,Fa,gt,Pa,Ma,vt,Qa,Na,yt,Wa,ja,Ga,Ha,Va,y,Ua,Ka,Ya,Et,Ja,za,Xa,Za,Ee,$a,es,ts,os,is,wt,as,ss,ls,_,ns,_t,rs,cs,He,ic=`<code class="language-undefined">classpath: /liquibase/changelog
changeLogFile: changelog.xml
url: jdbc:sqlserver://localhost:1433;database=master;encrypt=true;trustServerCertificate=true
username: sa
password: yourStrong(!)Password
# liquibaseProLicenseKey=&lt;PASTE LB PRO LICENSE KEY HERE&gt;</code>`,us,we,ds,hs,_e,fs,ps,ms,bs,qt,gs,vs,ys,p,Es,ws,_s,It,qs,Is,Ds,Dt,Cs,ks,Ss,Ls,Ct,Ts,As,Bs,xs,kt,Rs,Os,Fs,Ps,St,Ms,Qs,Ns,Ws,Lt,js,Gs,Hs,v,Vs,Us,Ks,Tt,Ys,Js,zs,At,Xs,Zs,$s,Bt,el,tl,xt,ol,il,al,Rt,sl,ll,nl,rl,j,cl,ul,dl,Ot,hl,fl,pl,ml,Ft,bl,yo,Ve,gl,Eo,O,G,vl,Pt,yl,El,Mt,wl,_l,Ue,ac=`<code class="language-c#">public class ConnectionStringsOptions
&#123;
   public const string ConfigKey = &quot;ConnectionStrings&quot;;
   public string MyDb &#123; get; set; &#125; = string.Empty;
&#125;</code>`,ql,F,Il,Qt,Dl,Cl,Nt,kl,Sl,Ll,Tl,L,qe,Al,Wt,Bl,xl,Rl,jt,Ol,Fl,Ie,Pl,Gt,Ml,Ql,Nl,Ht,Wl,jl,Vt,Gl,Hl,D,Vl,Ut,Ul,Kl,Kt,Yl,Jl,zl,Xl,Zl,$l,en,tn,Ke,sc=`<code class="language-c#">services.Configure&lt;ConnectionStringsOptions&gt;(opts =&gt; &#123;
   opts.MyDb = _connectionString;
&#125;);</code>`,on,T,an,Yt,sn,ln,Jt,nn,rn,zt,cn,un,dn,Ye,lc=`<code class="language-c#">public MsSqlTests(MsSqlTestFixture msSqlTestFixture)
&#123;
   _webApplicationFactory = new TestWebApplicationFactory&lt;Program&gt;(msSqlTestFixture);
   _httpClient = _webApplicationFactory.CreateClient(new WebApplicationFactoryClientOptions &#123;
     AllowAutoRedirect = false // Test first response
   &#125;);
&#125;
public void Dispose()
&#123;
   _webApplicationFactory.Dispose();
&#125;</code>`,wo,Je,hn,_o,H,fn,De,pn,mn,Xt,bn,gn,qo,ze,vn,Io,Xe,yn;return{c(){z=a("h1"),Lo=t("Publish Database from ERD"),to=r(),Q=a("p"),To=t("I’m focusing here only on a relational database, typically a suitable choice for my use cases."),Ao=a("br"),Bo=t(`
I often find that blogs/tutorials/demos always skip over the data aspect of solutions.`),xo=a("br"),Ro=t(`
In my experience managing code is easy, managing data is hard.  Unless your data is transient in nature database changes require careful thought.`),oo=r(),Le=a("p"),Oo=t("My key requirements in an effective data design strategy are:"),io=r(),k=a("ol"),X=a("li"),tt=a("strong"),Fo=t("Visualisation"),Po=t(" - I want to see an ERD or something similar, without this understanding a non-trivial database is going to be hard."),Mo=a("br"),Qo=t(`
This needs to be versioned with the code, which rules out Visio and other binary representations.`),No=r(),N=a("li"),ot=a("strong"),Wo=t("Automation"),jo=t(" - The ERD and the production database should be linked via automated means."),Go=a("br"),Ho=t(`
Out-of-date documentation is sometimes worse than no documentation at all.`),Vo=a("br"),Uo=t(`
This rules out EF Core migrations (even if not using EF Core for production code).`),Ko=r(),Z=a("li"),it=a("strong"),Yo=t("Testability"),Jo=t(" - Not so much a feature of the database, but I need to know that DB changes do not break things."),zo=a("br"),Xo=t(`
This means that integration tests must use the real database, on the same version as production, also during local dev, which leads me towards Docker.`),Zo=r(),B=a("li"),at=a("strong"),$o=t("Provider-agnostic"),ei=t(" - I have seen what vendor lock-in leads to and I don’t like it, we must maintain control of our applications."),ti=a("br"),oi=t(`
In reality it is impossible to avoid this completely, but simple things like adhering to `),ae=a("a"),ii=t("SQL Standards"),ai=t(` can help reduce the impact of migration.  I only want tables, indexes, constraints and possibly views, all logic will be in the application code.
This requirement rules out SSDT and `),se=a("a"),si=t("DACPAC"),li=t(" deployment which is great, but only for SQL Server."),ni=r(),Te=a("li"),st=a("strong"),ri=t("Maintainability"),ci=t(" - the solution needs to be simple to use in the medium to long term, though not necessarily simple to set up."),ao=r(),Ae=a("p"),ui=t("This mini project is something I’ve been meaning to do for years, since I built an Oracle DB deployment tool in Go and subsequently discovered DACPAC deployment in SQL Server."),so=r(),Be=a("h2"),di=t("Visualisation"),lo=r(),q=a("p"),hi=t("I considered various options, including Microsoft Visio, "),le=a("a"),fi=t("Mermaid"),pi=t(", "),ne=a("a"),mi=t("dbdiagram.io"),bi=t(", "),re=a("a"),gi=t("Structurizr"),vi=t(" to generate Mermaid diagrams, but eventually settled on "),ce=a("a"),yi=t("ERD Editor"),Ei=t(" for VS Code."),wi=a("br"),_i=t(`
I came to this decision because:`),no=r(),x=a("ul"),lt=a("li"),qi=t("It is free & open source, so even if it was taken offline and destroyed I could invest some time and recover to my forked version"),Ii=r(),nt=a("li"),Di=t("It is offline, meaning that any sensitive data models are kept secure"),Ci=r(),rt=a("li"),ki=t("It is stored in text/json format, not binary, which makes version control in git tenable"),Si=r(),ct=a("li"),Li=t("It has a feature to output liquibase changelogs built in"),ro=r(),xe=a("h2"),Ti=t("Automation"),co=r(),$=a("p"),Ai=t("Most DB automation tools are either prohibitively expensive, or vendor-specific."),Bi=a("br"),xi=t(`
I considered various options for automation, including:`),uo=r(),I=a("ul"),ut=a("li"),Ri=t("Enhancing my old Go based solution for Oracle DBs, but I don’t have the code, only the design principles, so effectively this would be a fresh start."),Oi=r(),Re=a("li"),ue=a("a"),Fi=t("SSDT (DACPAC publish)"),Pi=t(", but this is SQL Server specific."),Mi=r(),Oe=a("li"),de=a("a"),Qi=t("EF Migrations"),Ni=t(", but this doesn’t work with visualisation tools AFAIK and I don’t want to be tied to EF Core, since it is .NET only."),Wi=r(),Fe=a("li"),he=a("a"),ji=t("Redgate Tools"),Gi=t(" but I assume this is too expensive since they don’t list the price on their website."),Hi=r(),Pe=a("li"),fe=a("a"),Vi=t("Fluent Migrator"),Ui=t(" but again this is .NET-specific, I don’t see a benefit over EF Core."),Ki=r(),Me=a("li"),pe=a("a"),Yi=t("Roundhouse"),Ji=t(" but again this is .NET-specific, it also seems to be poorly maintained although I do like the convention-over-configuration approach at a glance"),ho=r(),W=a("p"),zi=t("I eventually settled on "),me=a("a"),Xi=t("Liquibase"),Zi=t(" because it has a free and open source option (Apache-2.0 licensed), supports Docker, is clearly built to support CI/CD with documented "),be=a("a"),$i=t("Open Source Workflows"),ea=t(" and, crucially, it works with the visualisation tool I’ve selected."),fo=r(),Qe=a("h2"),ta=t("Testability"),po=r(),R=a("p"),oa=t("The prompt for this mini-project was the discovery of "),ge=a("a"),ia=t("Testcontainers"),aa=t(" (via Nick Chapsas on Youtube)."),sa=a("br"),la=t(`
This allows you to spin up a throwaway docker container, or collection of, just for the lifetime of the test(s).`),na=a("br"),ra=t(`
This is not a substitute for unit testing since it will be significantly slower, but it is a better solution than testing with in-memory databases, which may have subtle differences in behaviour to the production database.`),mo=r(),Ne=a("p"),ca=t("I’m still working through the details of this in relation to the DB schema automation, but I’ve done enough to be convinced that it is viable."),bo=r(),We=a("h2"),ua=t("The solution"),go=r(),je=a("h3"),da=t("Initial setup"),vo=r(),f=a("ol"),dt=a("li"),ha=t("Install Docker (and optionally Docker Desktop, if licencing allows), examples below are unix images on Windows."),fa=r(),ee=a("li"),pa=t("Run SQL instance (example is MSSQL) for any manual testing and to prove scripts"),ma=a("br"),ba=r(),ht=a("code"),ga=t('docker run --name "mssql_manual_test" -e "ACCEPT_EULA=Y" -e "MSSQL_SA_PASSWORD=yourStrong(!)Password" -p 1433:1433 -d mcr.microsoft.com/mssql/server:2022-latest'),va=r(),Ge=a("li"),ya=t("Get latest liquibase image "),ft=a("code"),Ea=t("docker pull liquibase/liquibase"),wa=r(),pt=a("li"),_a=t("Install VS Code extension “ERD Editor” (vuerd)"),qa=r(),ve=a("li"),Ia=t("Create an ERD file "),mt=a("code"),Da=t("<name>.vuerd.json"),Ca=t(" within the project/solution/workspace, open this in VS Code and it should automatically load the editor."),ka=r(),g=a("li"),Sa=t("Create a DB model, be sure not to deselect Postgres as the output regardless of target DB type, required for Liquibase support"),La=a("br"),Ta=t(`
Be careful here to use appropriate data types for the target environment, `),ye=a("a"),Aa=t("ERD Editor supported types"),Ba=t("."),xa=a("br"),Ra=t(`
The tool is clever enough to convert from `),bt=a("code"),Oa=t("uuid"),Fa=t(" to "),gt=a("code"),Pa=t("uniqueidentifier"),Ma=t(", but not clever enough to convert from "),vt=a("code"),Qa=t("varchar"),Na=t(" to "),yt=a("code"),Wa=t("varchar2"),ja=t(" for example and certainly not when lengths are included (which they need to be since the default is 1 character)."),Ga=a("br"),Ha=t(`
Effectively I’d advise making multiple DB models if supporting multiple DB providers, but decide which is master, copy/paste, find/replace in JSON files to keep multiple versions in sync and versioned together (this is why models should be stored in text format).`),Va=r(),y=a("li"),Ua=t("Generate a Liquibase changeset by right clicking the model and selecting Export > Liquibase"),Ka=a("br"),Ya=t(`
Use the naming convention `),Et=a("em"),Ja=t("liquibase-change-###"),za=t(", 999 DB changes should be enough for most projects."),Xa=a("br"),Za=t(`
Liquibase uses the id, author and filename to track changes - `),Ee=a("a"),$a=t("How Liquibase works"),es=a("br"),ts=t(`
Keep the changelogs alongside the ERD model in source code, this lets ERD Editor load older changelogs to guarantee correct generation of new changelogs.`),os=a("br"),is=t(`
To apply multiple chainsets automatically, which we will need for automation, it is necessary to manually configure a master changelog `),wt=a("code"),as=t("liquibase-change.xml"),ss=t("."),ls=r(),_=a("li"),ns=t("Configure liquibase using a "),_t=a("em"),rs=t("liquibase.properties"),cs=t(" file in the same folder:  "),He=a("pre"),us=t("This example is using the defaults for a "),we=a("a"),ds=t("SQL Server docker"),hs=t(" container, although the "),_e=a("a"),fs=t("Liquibase recommendation"),ps=t(" is to pass these as arguments.  Passing by argument is also required for running multiple test sets in parallel since only one Docker container at a time can respond on a given port, even if we reuse credentials for testing, so this defaultsFile is kept just to simplify any manual test processes."),ms=a("br"),bs=t(`
We require `),qt=a("code"),gs=t("encrypt=true and trustServerCertificate=true"),vs=t(" to resolve firewall and SSL errors respectively, encountered whilst applying test changeset."),ys=r(),p=a("li"),Es=t("We can now run liquibase commands, e.g. help"),ws=a("br"),_s=r(),It=a("code"),qs=t('docker run --rm --net=host -v "C:\\Path\\To\\Folder\\Containing\\changelogs":/liquibase/changelog liquibase/liquibase --defaultsFile=/liquibase/changelog/liquibase.properties --help'),Is=a("br"),Ds=r(),Dt=a("code"),Cs=t("--rm"),ks=t(" ensures that the docker container is removed after completion of the script (see debugging)"),Ss=a("br"),Ls=r(),Ct=a("code"),Ts=t("-net=host"),As=t(" ensures that the liquibase container can talk outside of the Docker bridge network (e.g. to connect to a Docker hosted DB).  In hindsight it is better to use internal network alias on the SQL container to connect from liquibase."),Bs=a("br"),xs=r(),kt=a("code"),Rs=t("-v"),Os=t(" maps our local folder (Windows in this example) to the root of Liquibase’s changelog tree volume."),Fs=a("br"),Ps=r(),St=a("code"),Ms=t("--defaultsFile"),Qs=t(" tells Liquibase to use our properties file, which in turn tells it where to find changelogs and how to connect to the DB."),Ns=a("br"),Ws=r(),Lt=a("code"),js=t("--help"),Gs=t(" tells Liquibase to show us its help documentation, including available commands"),Hs=r(),v=a("li"),Vs=t("Debugging - if any of our commands fail we can investigate by launching Liquibase with a built-in in-memory DB:"),Us=a("br"),Ks=r(),Tt=a("code"),Ys=t('docker run --net=host -v "C:\\Path\\To\\Folder\\Containing\\changelogs":/liquibase/changelog liquibase/liquibase --defaultsFile=/liquibase/changelog/liquibase.properties init start-h2'),Js=a("br"),zs=t(`
In a separate command window find the running container using `),At=a("code"),Xs=t("docker ps"),Zs=a("br"),$s=t(`
Jump inside it using `),Bt=a("code"),el=t("docker exec -it <container_id> bash"),tl=t(", you should see your files within "),xt=a("code"),ol=t("/changelog"),il=a("br"),al=t(`
From here you can run the same commands (everything after liquibase/liquibase) on top of liquibase directly, e.g. `),Rt=a("code"),sl=t("liquibase --help"),ll=a("br"),nl=t(`
When done you will need to stop and remove the docker container yourself.`),rl=r(),j=a("li"),cl=t("Apply the changeset to the database manually (dbo schema is default for SQL Server)"),ul=a("br"),dl=r(),Ot=a("code"),hl=t('docker run --rm --net=host -v "C:\\Path\\To\\Folder\\Containing\\changelogs":/liquibase/changelog liquibase/liquibase --defaultsFile=/liquibase/changelog/liquibase.properties update --changelog-file=liquibase-change-001.xml --default-schema-name=dbo'),fl=a("br"),pl=t(`
If a changeset fails in dev, perhaps due to messing up constraints :|, and you wish to keep changesets clean before commit, you can truncate the table DATABASECHANGELOG which Liquibase manages.`),ml=r(),Ft=a("li"),bl=t("Check that this has worked as expected using SQL Server Object Explorer in Visual Studio or SQL browser of preference."),yo=r(),Ve=a("h3"),gl=t("Code changes"),Eo=r(),O=a("ol"),G=a("li"),vl=t("Ensure that any DB code (repository) accesses the connection string via "),Pt=a("code"),yl=t("IOptions"),El=t(" or better yet "),Mt=a("code"),wl=t("IOptionsSnapshot"),_l=t(" to allow life reloading of config.  "),Ue=a("pre"),ql=r(),F=a("li"),Il=t("Create an xUnit IClassFixture "),Qt=a("code"),Dl=t("MsSqlTestFixture"),Cl=t(", implementing "),Nt=a("code"),kl=t("IAsyncLifetime"),Sl=t(" to ensure that it runs once per test class which uses it."),Ll=a("br"),Tl=t(`
This class will:  `),L=a("ol"),qe=a("li"),Al=t("Create a SQL container using the "),Wt=a("code"),Bl=t("ContainerBuilder"),xl=t(", mirroring the parameters above, although with a dynamically generated port."),Rl=r(),jt=a("li"),Ol=t("Wait for this to become responsive (accept SQL commands not just at the Docker/network layer)"),Fl=r(),Ie=a("li"),Pl=t("Spin up a Liquibase container to run a single command on this transient database - "),Gt=a("code"),Ml=t("update"),Ql=t(", to apply all changes to get to the current version from an empty database."),Nl=r(),Ht=a("li"),Wl=t("Clear down both containers and associated classes after test execution"),jl=r(),Vt=a("li"),Gl=t("Expose SQL connection details via internal constants, for use by the test application."),Hl=r(),D=a("li"),Vl=t("Create a custom "),Ut=a("code"),Ul=t("WebApplicationFactory"),Kl=t(" for testing, e.g. "),Kt=a("code"),Yl=t("TestWebApplicationFactory"),Jl=t("."),zl=a("br"),Xl=t(`
This will build upon the WebApplicationFactory used by the application itself, but we can remove links to real database and real external dependencies in favour of managed stubs (out of scope of this document).`),Zl=a("br"),$l=t(`
Add a constructor to this class which requires the MsSqlTestFixture and builds up the connection string from its exposed constants.`),en=a("br"),tn=t(`
Configure the Options class containing the connection string used by the code.  `),Ke=a("pre"),on=r(),T=a("li"),an=t("Create a test class "),Yt=a("code"),sn=t("MsSqlTests"),ln=t(" which inherits "),Jt=a("code"),nn=t("IClassFixture<MsSqlTestFixture>"),rn=t(" and "),zt=a("code"),cn=t("IDisposable"),un=a("br"),dn=t(`
In the constructor use the above classes to make the DB available to the tests:`),Ye=a("pre"),wo=r(),Je=a("h3"),hn=t("Next steps"),_o=r(),H=a("p"),fn=t("I’m doing all of this on a preview version of .NET8 and there is sadly "),De=a("a"),pn=t("an issue"),mn=t(" with "),Xt=a("code"),bn=t("Microsoft.Data.SqlClient"),gn=t(" which means I can’t actually run these tests, but the signs are good; Docker containers do get spun up in the order expected and for the length of time expected and everything cleans up after itself.  Back to actually writing the application logic I guess, though I’d love to actually work in a more test-driven fashion."),qo=r(),ze=a("p"),vn=t(`Finally I need to automate integration testing on CICD pipelines.
But I need to test the tests first and this activity is out of scope of this document.`),Io=r(),Xe=a("p"),yn=t("All of the above is checked in to a private GitHub repo for now, I may make this public at some point."),this.h()},l(l){z=s(l,"H1",{});var u=n(z);Lo=o(u,"Publish Database from ERD"),u.forEach(i),to=c(l),Q=s(l,"P",{});var Ze=n(Q);To=o(Ze,"I’m focusing here only on a relational database, typically a suitable choice for my use cases."),Ao=s(Ze,"BR",{}),Bo=o(Ze,`
I often find that blogs/tutorials/demos always skip over the data aspect of solutions.`),xo=s(Ze,"BR",{}),Ro=o(Ze,`
In my experience managing code is easy, managing data is hard.  Unless your data is transient in nature database changes require careful thought.`),Ze.forEach(i),oo=c(l),Le=s(l,"P",{});var Sn=n(Le);Oo=o(Sn,"My key requirements in an effective data design strategy are:"),Sn.forEach(i),io=c(l),k=s(l,"OL",{});var V=n(k);X=s(V,"LI",{});var Zt=n(X);tt=s(Zt,"STRONG",{});var Ln=n(tt);Fo=o(Ln,"Visualisation"),Ln.forEach(i),Po=o(Zt," - I want to see an ERD or something similar, without this understanding a non-trivial database is going to be hard."),Mo=s(Zt,"BR",{}),Qo=o(Zt,`
This needs to be versioned with the code, which rules out Visio and other binary representations.`),Zt.forEach(i),No=c(V),N=s(V,"LI",{});var Ce=n(N);ot=s(Ce,"STRONG",{});var Tn=n(ot);Wo=o(Tn,"Automation"),Tn.forEach(i),jo=o(Ce," - The ERD and the production database should be linked via automated means."),Go=s(Ce,"BR",{}),Ho=o(Ce,`
Out-of-date documentation is sometimes worse than no documentation at all.`),Vo=s(Ce,"BR",{}),Uo=o(Ce,`
This rules out EF Core migrations (even if not using EF Core for production code).`),Ce.forEach(i),Ko=c(V),Z=s(V,"LI",{});var $t=n(Z);it=s($t,"STRONG",{});var An=n(it);Yo=o(An,"Testability"),An.forEach(i),Jo=o($t," - Not so much a feature of the database, but I need to know that DB changes do not break things."),zo=s($t,"BR",{}),Xo=o($t,`
This means that integration tests must use the real database, on the same version as production, also during local dev, which leads me towards Docker.`),$t.forEach(i),Zo=c(V),B=s(V,"LI",{});var Y=n(B);at=s(Y,"STRONG",{});var Bn=n(at);$o=o(Bn,"Provider-agnostic"),Bn.forEach(i),ei=o(Y," - I have seen what vendor lock-in leads to and I don’t like it, we must maintain control of our applications."),ti=s(Y,"BR",{}),oi=o(Y,`
In reality it is impossible to avoid this completely, but simple things like adhering to `),ae=s(Y,"A",{href:!0,rel:!0});var xn=n(ae);ii=o(xn,"SQL Standards"),xn.forEach(i),ai=o(Y,` can help reduce the impact of migration.  I only want tables, indexes, constraints and possibly views, all logic will be in the application code.
This requirement rules out SSDT and `),se=s(Y,"A",{href:!0,rel:!0});var Rn=n(se);si=o(Rn,"DACPAC"),Rn.forEach(i),li=o(Y," deployment which is great, but only for SQL Server."),Y.forEach(i),ni=c(V),Te=s(V,"LI",{});var En=n(Te);st=s(En,"STRONG",{});var On=n(st);ri=o(On,"Maintainability"),On.forEach(i),ci=o(En," - the solution needs to be simple to use in the medium to long term, though not necessarily simple to set up."),En.forEach(i),V.forEach(i),ao=c(l),Ae=s(l,"P",{});var Fn=n(Ae);ui=o(Fn,"This mini project is something I’ve been meaning to do for years, since I built an Oracle DB deployment tool in Go and subsequently discovered DACPAC deployment in SQL Server."),Fn.forEach(i),so=c(l),Be=s(l,"H2",{});var Pn=n(Be);di=o(Pn,"Visualisation"),Pn.forEach(i),lo=c(l),q=s(l,"P",{});var P=n(q);hi=o(P,"I considered various options, including Microsoft Visio, "),le=s(P,"A",{href:!0,rel:!0});var Mn=n(le);fi=o(Mn,"Mermaid"),Mn.forEach(i),pi=o(P,", "),ne=s(P,"A",{href:!0,rel:!0});var Qn=n(ne);mi=o(Qn,"dbdiagram.io"),Qn.forEach(i),bi=o(P,", "),re=s(P,"A",{href:!0,rel:!0});var Nn=n(re);gi=o(Nn,"Structurizr"),Nn.forEach(i),vi=o(P," to generate Mermaid diagrams, but eventually settled on "),ce=s(P,"A",{href:!0,rel:!0});var Wn=n(ce);yi=o(Wn,"ERD Editor"),Wn.forEach(i),Ei=o(P," for VS Code."),wi=s(P,"BR",{}),_i=o(P,`
I came to this decision because:`),P.forEach(i),no=c(l),x=s(l,"UL",{});var te=n(x);lt=s(te,"LI",{});var jn=n(lt);qi=o(jn,"It is free & open source, so even if it was taken offline and destroyed I could invest some time and recover to my forked version"),jn.forEach(i),Ii=c(te),nt=s(te,"LI",{});var Gn=n(nt);Di=o(Gn,"It is offline, meaning that any sensitive data models are kept secure"),Gn.forEach(i),Ci=c(te),rt=s(te,"LI",{});var Hn=n(rt);ki=o(Hn,"It is stored in text/json format, not binary, which makes version control in git tenable"),Hn.forEach(i),Si=c(te),ct=s(te,"LI",{});var Vn=n(ct);Li=o(Vn,"It has a feature to output liquibase changelogs built in"),Vn.forEach(i),te.forEach(i),ro=c(l),xe=s(l,"H2",{});var Un=n(xe);Ti=o(Un,"Automation"),Un.forEach(i),co=c(l),$=s(l,"P",{});var Do=n($);Ai=o(Do,"Most DB automation tools are either prohibitively expensive, or vendor-specific."),Bi=s(Do,"BR",{}),xi=o(Do,`
I considered various options for automation, including:`),Do.forEach(i),uo=c(l),I=s(l,"UL",{});var M=n(I);ut=s(M,"LI",{});var Kn=n(ut);Ri=o(Kn,"Enhancing my old Go based solution for Oracle DBs, but I don’t have the code, only the design principles, so effectively this would be a fresh start."),Kn.forEach(i),Oi=c(M),Re=s(M,"LI",{});var wn=n(Re);ue=s(wn,"A",{href:!0,rel:!0});var Yn=n(ue);Fi=o(Yn,"SSDT (DACPAC publish)"),Yn.forEach(i),Pi=o(wn,", but this is SQL Server specific."),wn.forEach(i),Mi=c(M),Oe=s(M,"LI",{});var _n=n(Oe);de=s(_n,"A",{href:!0,rel:!0});var Jn=n(de);Qi=o(Jn,"EF Migrations"),Jn.forEach(i),Ni=o(_n,", but this doesn’t work with visualisation tools AFAIK and I don’t want to be tied to EF Core, since it is .NET only."),_n.forEach(i),Wi=c(M),Fe=s(M,"LI",{});var qn=n(Fe);he=s(qn,"A",{href:!0,rel:!0});var zn=n(he);ji=o(zn,"Redgate Tools"),zn.forEach(i),Gi=o(qn," but I assume this is too expensive since they don’t list the price on their website."),qn.forEach(i),Hi=c(M),Pe=s(M,"LI",{});var In=n(Pe);fe=s(In,"A",{href:!0,rel:!0});var Xn=n(fe);Vi=o(Xn,"Fluent Migrator"),Xn.forEach(i),Ui=o(In," but again this is .NET-specific, I don’t see a benefit over EF Core."),In.forEach(i),Ki=c(M),Me=s(M,"LI",{});var Dn=n(Me);pe=s(Dn,"A",{href:!0,rel:!0});var Zn=n(pe);Yi=o(Zn,"Roundhouse"),Zn.forEach(i),Ji=o(Dn," but again this is .NET-specific, it also seems to be poorly maintained although I do like the convention-over-configuration approach at a glance"),Dn.forEach(i),M.forEach(i),ho=c(l),W=s(l,"P",{});var $e=n(W);zi=o($e,"I eventually settled on "),me=s($e,"A",{href:!0,rel:!0});var $n=n(me);Xi=o($n,"Liquibase"),$n.forEach(i),Zi=o($e," because it has a free and open source option (Apache-2.0 licensed), supports Docker, is clearly built to support CI/CD with documented "),be=s($e,"A",{href:!0,rel:!0});var er=n(be);$i=o(er,"Open Source Workflows"),er.forEach(i),ea=o($e," and, crucially, it works with the visualisation tool I’ve selected."),$e.forEach(i),fo=c(l),Qe=s(l,"H2",{});var tr=n(Qe);ta=o(tr,"Testability"),tr.forEach(i),po=c(l),R=s(l,"P",{});var oe=n(R);oa=o(oe,"The prompt for this mini-project was the discovery of "),ge=s(oe,"A",{href:!0,rel:!0});var or=n(ge);ia=o(or,"Testcontainers"),or.forEach(i),aa=o(oe," (via Nick Chapsas on Youtube)."),sa=s(oe,"BR",{}),la=o(oe,`
This allows you to spin up a throwaway docker container, or collection of, just for the lifetime of the test(s).`),na=s(oe,"BR",{}),ra=o(oe,`
This is not a substitute for unit testing since it will be significantly slower, but it is a better solution than testing with in-memory databases, which may have subtle differences in behaviour to the production database.`),oe.forEach(i),mo=c(l),Ne=s(l,"P",{});var ir=n(Ne);ca=o(ir,"I’m still working through the details of this in relation to the DB schema automation, but I’ve done enough to be convinced that it is viable."),ir.forEach(i),bo=c(l),We=s(l,"H2",{});var ar=n(We);ua=o(ar,"The solution"),ar.forEach(i),go=c(l),je=s(l,"H3",{});var sr=n(je);da=o(sr,"Initial setup"),sr.forEach(i),vo=c(l),f=s(l,"OL",{});var b=n(f);dt=s(b,"LI",{});var lr=n(dt);ha=o(lr,"Install Docker (and optionally Docker Desktop, if licencing allows), examples below are unix images on Windows."),lr.forEach(i),fa=c(b),ee=s(b,"LI",{});var eo=n(ee);pa=o(eo,"Run SQL instance (example is MSSQL) for any manual testing and to prove scripts"),ma=s(eo,"BR",{}),ba=c(eo),ht=s(eo,"CODE",{});var nr=n(ht);ga=o(nr,'docker run --name "mssql_manual_test" -e "ACCEPT_EULA=Y" -e "MSSQL_SA_PASSWORD=yourStrong(!)Password" -p 1433:1433 -d mcr.microsoft.com/mssql/server:2022-latest'),nr.forEach(i),eo.forEach(i),va=c(b),Ge=s(b,"LI",{});var Cn=n(Ge);ya=o(Cn,"Get latest liquibase image "),ft=s(Cn,"CODE",{});var rr=n(ft);Ea=o(rr,"docker pull liquibase/liquibase"),rr.forEach(i),Cn.forEach(i),wa=c(b),pt=s(b,"LI",{});var cr=n(pt);_a=o(cr,"Install VS Code extension “ERD Editor” (vuerd)"),cr.forEach(i),qa=c(b),ve=s(b,"LI",{});var Co=n(ve);Ia=o(Co,"Create an ERD file "),mt=s(Co,"CODE",{});var ur=n(mt);Da=o(ur,"<name>.vuerd.json"),ur.forEach(i),Ca=o(Co," within the project/solution/workspace, open this in VS Code and it should automatically load the editor."),Co.forEach(i),ka=c(b),g=s(b,"LI",{});var E=n(g);Sa=o(E,"Create a DB model, be sure not to deselect Postgres as the output regardless of target DB type, required for Liquibase support"),La=s(E,"BR",{}),Ta=o(E,`
Be careful here to use appropriate data types for the target environment, `),ye=s(E,"A",{href:!0,rel:!0});var dr=n(ye);Aa=o(dr,"ERD Editor supported types"),dr.forEach(i),Ba=o(E,"."),xa=s(E,"BR",{}),Ra=o(E,`
The tool is clever enough to convert from `),bt=s(E,"CODE",{});var hr=n(bt);Oa=o(hr,"uuid"),hr.forEach(i),Fa=o(E," to "),gt=s(E,"CODE",{});var fr=n(gt);Pa=o(fr,"uniqueidentifier"),fr.forEach(i),Ma=o(E,", but not clever enough to convert from "),vt=s(E,"CODE",{});var pr=n(vt);Qa=o(pr,"varchar"),pr.forEach(i),Na=o(E," to "),yt=s(E,"CODE",{});var mr=n(yt);Wa=o(mr,"varchar2"),mr.forEach(i),ja=o(E," for example and certainly not when lengths are included (which they need to be since the default is 1 character)."),Ga=s(E,"BR",{}),Ha=o(E,`
Effectively I’d advise making multiple DB models if supporting multiple DB providers, but decide which is master, copy/paste, find/replace in JSON files to keep multiple versions in sync and versioned together (this is why models should be stored in text format).`),E.forEach(i),Va=c(b),y=s(b,"LI",{});var C=n(y);Ua=o(C,"Generate a Liquibase changeset by right clicking the model and selecting Export > Liquibase"),Ka=s(C,"BR",{}),Ya=o(C,`
Use the naming convention `),Et=s(C,"EM",{});var br=n(Et);Ja=o(br,"liquibase-change-###"),br.forEach(i),za=o(C,", 999 DB changes should be enough for most projects."),Xa=s(C,"BR",{}),Za=o(C,`
Liquibase uses the id, author and filename to track changes - `),Ee=s(C,"A",{href:!0,rel:!0});var gr=n(Ee);$a=o(gr,"How Liquibase works"),gr.forEach(i),es=s(C,"BR",{}),ts=o(C,`
Keep the changelogs alongside the ERD model in source code, this lets ERD Editor load older changelogs to guarantee correct generation of new changelogs.`),os=s(C,"BR",{}),is=o(C,`
To apply multiple chainsets automatically, which we will need for automation, it is necessary to manually configure a master changelog `),wt=s(C,"CODE",{});var vr=n(wt);as=o(vr,"liquibase-change.xml"),vr.forEach(i),ss=o(C,"."),C.forEach(i),ls=c(b),_=s(b,"LI",{});var S=n(_);ns=o(S,"Configure liquibase using a "),_t=s(S,"EM",{});var yr=n(_t);rs=o(yr,"liquibase.properties"),yr.forEach(i),cs=o(S," file in the same folder:  "),He=s(S,"PRE",{class:!0});var nc=n(He);nc.forEach(i),us=o(S,"This example is using the defaults for a "),we=s(S,"A",{href:!0,rel:!0});var Er=n(we);ds=o(Er,"SQL Server docker"),Er.forEach(i),hs=o(S," container, although the "),_e=s(S,"A",{href:!0,rel:!0});var wr=n(_e);fs=o(wr,"Liquibase recommendation"),wr.forEach(i),ps=o(S," is to pass these as arguments.  Passing by argument is also required for running multiple test sets in parallel since only one Docker container at a time can respond on a given port, even if we reuse credentials for testing, so this defaultsFile is kept just to simplify any manual test processes."),ms=s(S,"BR",{}),bs=o(S,`
We require `),qt=s(S,"CODE",{});var _r=n(qt);gs=o(_r,"encrypt=true and trustServerCertificate=true"),_r.forEach(i),vs=o(S," to resolve firewall and SSL errors respectively, encountered whilst applying test changeset."),S.forEach(i),ys=c(b),p=s(b,"LI",{});var m=n(p);Es=o(m,"We can now run liquibase commands, e.g. help"),ws=s(m,"BR",{}),_s=c(m),It=s(m,"CODE",{});var qr=n(It);qs=o(qr,'docker run --rm --net=host -v "C:\\Path\\To\\Folder\\Containing\\changelogs":/liquibase/changelog liquibase/liquibase --defaultsFile=/liquibase/changelog/liquibase.properties --help'),qr.forEach(i),Is=s(m,"BR",{}),Ds=c(m),Dt=s(m,"CODE",{});var Ir=n(Dt);Cs=o(Ir,"--rm"),Ir.forEach(i),ks=o(m," ensures that the docker container is removed after completion of the script (see debugging)"),Ss=s(m,"BR",{}),Ls=c(m),Ct=s(m,"CODE",{});var Dr=n(Ct);Ts=o(Dr,"-net=host"),Dr.forEach(i),As=o(m," ensures that the liquibase container can talk outside of the Docker bridge network (e.g. to connect to a Docker hosted DB).  In hindsight it is better to use internal network alias on the SQL container to connect from liquibase."),Bs=s(m,"BR",{}),xs=c(m),kt=s(m,"CODE",{});var Cr=n(kt);Rs=o(Cr,"-v"),Cr.forEach(i),Os=o(m," maps our local folder (Windows in this example) to the root of Liquibase’s changelog tree volume."),Fs=s(m,"BR",{}),Ps=c(m),St=s(m,"CODE",{});var kr=n(St);Ms=o(kr,"--defaultsFile"),kr.forEach(i),Qs=o(m," tells Liquibase to use our properties file, which in turn tells it where to find changelogs and how to connect to the DB."),Ns=s(m,"BR",{}),Ws=c(m),Lt=s(m,"CODE",{});var Sr=n(Lt);js=o(Sr,"--help"),Sr.forEach(i),Gs=o(m," tells Liquibase to show us its help documentation, including available commands"),m.forEach(i),Hs=c(b),v=s(b,"LI",{});var w=n(v);Vs=o(w,"Debugging - if any of our commands fail we can investigate by launching Liquibase with a built-in in-memory DB:"),Us=s(w,"BR",{}),Ks=c(w),Tt=s(w,"CODE",{});var Lr=n(Tt);Ys=o(Lr,'docker run --net=host -v "C:\\Path\\To\\Folder\\Containing\\changelogs":/liquibase/changelog liquibase/liquibase --defaultsFile=/liquibase/changelog/liquibase.properties init start-h2'),Lr.forEach(i),Js=s(w,"BR",{}),zs=o(w,`
In a separate command window find the running container using `),At=s(w,"CODE",{});var Tr=n(At);Xs=o(Tr,"docker ps"),Tr.forEach(i),Zs=s(w,"BR",{}),$s=o(w,`
Jump inside it using `),Bt=s(w,"CODE",{});var Ar=n(Bt);el=o(Ar,"docker exec -it <container_id> bash"),Ar.forEach(i),tl=o(w,", you should see your files within "),xt=s(w,"CODE",{});var Br=n(xt);ol=o(Br,"/changelog"),Br.forEach(i),il=s(w,"BR",{}),al=o(w,`
From here you can run the same commands (everything after liquibase/liquibase) on top of liquibase directly, e.g. `),Rt=s(w,"CODE",{});var xr=n(Rt);sl=o(xr,"liquibase --help"),xr.forEach(i),ll=s(w,"BR",{}),nl=o(w,`
When done you will need to stop and remove the docker container yourself.`),w.forEach(i),rl=c(b),j=s(b,"LI",{});var ke=n(j);cl=o(ke,"Apply the changeset to the database manually (dbo schema is default for SQL Server)"),ul=s(ke,"BR",{}),dl=c(ke),Ot=s(ke,"CODE",{});var Rr=n(Ot);hl=o(Rr,'docker run --rm --net=host -v "C:\\Path\\To\\Folder\\Containing\\changelogs":/liquibase/changelog liquibase/liquibase --defaultsFile=/liquibase/changelog/liquibase.properties update --changelog-file=liquibase-change-001.xml --default-schema-name=dbo'),Rr.forEach(i),fl=s(ke,"BR",{}),pl=o(ke,`
If a changeset fails in dev, perhaps due to messing up constraints :|, and you wish to keep changesets clean before commit, you can truncate the table DATABASECHANGELOG which Liquibase manages.`),ke.forEach(i),ml=c(b),Ft=s(b,"LI",{});var Or=n(Ft);bl=o(Or,"Check that this has worked as expected using SQL Server Object Explorer in Visual Studio or SQL browser of preference."),Or.forEach(i),b.forEach(i),yo=c(l),Ve=s(l,"H3",{});var Fr=n(Ve);gl=o(Fr,"Code changes"),Fr.forEach(i),Eo=c(l),O=s(l,"OL",{});var ie=n(O);G=s(ie,"LI",{});var Se=n(G);vl=o(Se,"Ensure that any DB code (repository) accesses the connection string via "),Pt=s(Se,"CODE",{});var Pr=n(Pt);yl=o(Pr,"IOptions"),Pr.forEach(i),El=o(Se," or better yet "),Mt=s(Se,"CODE",{});var Mr=n(Mt);wl=o(Mr,"IOptionsSnapshot"),Mr.forEach(i),_l=o(Se," to allow life reloading of config.  "),Ue=s(Se,"PRE",{class:!0});var rc=n(Ue);rc.forEach(i),Se.forEach(i),ql=c(ie),F=s(ie,"LI",{});var J=n(F);Il=o(J,"Create an xUnit IClassFixture "),Qt=s(J,"CODE",{});var Qr=n(Qt);Dl=o(Qr,"MsSqlTestFixture"),Qr.forEach(i),Cl=o(J,", implementing "),Nt=s(J,"CODE",{});var Nr=n(Nt);kl=o(Nr,"IAsyncLifetime"),Nr.forEach(i),Sl=o(J," to ensure that it runs once per test class which uses it."),Ll=s(J,"BR",{}),Tl=o(J,`
This class will:  `),L=s(J,"OL",{});var U=n(L);qe=s(U,"LI",{});var ko=n(qe);Al=o(ko,"Create a SQL container using the "),Wt=s(ko,"CODE",{});var Wr=n(Wt);Bl=o(Wr,"ContainerBuilder"),Wr.forEach(i),xl=o(ko,", mirroring the parameters above, although with a dynamically generated port."),ko.forEach(i),Rl=c(U),jt=s(U,"LI",{});var jr=n(jt);Ol=o(jr,"Wait for this to become responsive (accept SQL commands not just at the Docker/network layer)"),jr.forEach(i),Fl=c(U),Ie=s(U,"LI",{});var So=n(Ie);Pl=o(So,"Spin up a Liquibase container to run a single command on this transient database - "),Gt=s(So,"CODE",{});var Gr=n(Gt);Ml=o(Gr,"update"),Gr.forEach(i),Ql=o(So,", to apply all changes to get to the current version from an empty database."),So.forEach(i),Nl=c(U),Ht=s(U,"LI",{});var Hr=n(Ht);Wl=o(Hr,"Clear down both containers and associated classes after test execution"),Hr.forEach(i),jl=c(U),Vt=s(U,"LI",{});var Vr=n(Vt);Gl=o(Vr,"Expose SQL connection details via internal constants, for use by the test application."),Vr.forEach(i),U.forEach(i),J.forEach(i),Hl=c(ie),D=s(ie,"LI",{});var A=n(D);Vl=o(A,"Create a custom "),Ut=s(A,"CODE",{});var Ur=n(Ut);Ul=o(Ur,"WebApplicationFactory"),Ur.forEach(i),Kl=o(A," for testing, e.g. "),Kt=s(A,"CODE",{});var Kr=n(Kt);Yl=o(Kr,"TestWebApplicationFactory"),Kr.forEach(i),Jl=o(A,"."),zl=s(A,"BR",{}),Xl=o(A,`
This will build upon the WebApplicationFactory used by the application itself, but we can remove links to real database and real external dependencies in favour of managed stubs (out of scope of this document).`),Zl=s(A,"BR",{}),$l=o(A,`
Add a constructor to this class which requires the MsSqlTestFixture and builds up the connection string from its exposed constants.`),en=s(A,"BR",{}),tn=o(A,`
Configure the Options class containing the connection string used by the code.  `),Ke=s(A,"PRE",{class:!0});var cc=n(Ke);cc.forEach(i),A.forEach(i),on=c(ie),T=s(ie,"LI",{});var K=n(T);an=o(K,"Create a test class "),Yt=s(K,"CODE",{});var Yr=n(Yt);sn=o(Yr,"MsSqlTests"),Yr.forEach(i),ln=o(K," which inherits "),Jt=s(K,"CODE",{});var Jr=n(Jt);nn=o(Jr,"IClassFixture<MsSqlTestFixture>"),Jr.forEach(i),rn=o(K," and "),zt=s(K,"CODE",{});var zr=n(zt);cn=o(zr,"IDisposable"),zr.forEach(i),un=s(K,"BR",{}),dn=o(K,`
In the constructor use the above classes to make the DB available to the tests:`),Ye=s(K,"PRE",{class:!0});var uc=n(Ye);uc.forEach(i),K.forEach(i),ie.forEach(i),wo=c(l),Je=s(l,"H3",{});var Xr=n(Je);hn=o(Xr,"Next steps"),Xr.forEach(i),_o=c(l),H=s(l,"P",{});var et=n(H);fn=o(et,"I’m doing all of this on a preview version of .NET8 and there is sadly "),De=s(et,"A",{href:!0,rel:!0});var Zr=n(De);pn=o(Zr,"an issue"),Zr.forEach(i),mn=o(et," with "),Xt=s(et,"CODE",{});var $r=n(Xt);bn=o($r,"Microsoft.Data.SqlClient"),$r.forEach(i),gn=o(et," which means I can’t actually run these tests, but the signs are good; Docker containers do get spun up in the order expected and for the length of time expected and everything cleans up after itself.  Back to actually writing the application logic I guess, though I’d love to actually work in a more test-driven fashion."),et.forEach(i),qo=c(l),ze=s(l,"P",{});var ec=n(ze);vn=o(ec,`Finally I need to automate integration testing on CICD pipelines.
But I need to test the tests first and this activity is out of scope of this document.`),ec.forEach(i),Io=c(l),Xe=s(l,"P",{});var tc=n(Xe);yn=o(tc,"All of the above is checked in to a private GitHub repo for now, I may make this public at some point."),tc.forEach(i),this.h()},h(){h(ae,"href","https://learnsql.com/blog/history-of-sql-standards/"),h(ae,"rel","nofollow"),h(se,"href","https://github.com/microsoft/DacFx"),h(se,"rel","nofollow"),h(le,"href","https://mermaid.js.org/syntax/entityRelationshipDiagram.html"),h(le,"rel","nofollow"),h(ne,"href","https://dbdiagram.io/home/"),h(ne,"rel","nofollow"),h(re,"href","https://structurizr.com/dsl?example=getting-started"),h(re,"rel","nofollow"),h(ce,"href","https://marketplace.visualstudio.com/items?itemName=dineug.vuerd-vscode"),h(ce,"rel","nofollow"),h(ue,"href","https://learn.microsoft.com/en-us/sql/ssdt/extract-publish-and-register-dacpac-files?view=sql-server-ver16"),h(ue,"rel","nofollow"),h(de,"href","https://learn.microsoft.com/en-us/ef/core/managing-schemas/migrations/?tabs=dotnet-core-cli"),h(de,"rel","nofollow"),h(he,"href","https://www.red-gate.com/solutions/need/automate"),h(he,"rel","nofollow"),h(fe,"href","https://fluentmigrator.github.io"),h(fe,"rel","nofollow"),h(pe,"href","https://github.com/chucknorris/roundhouse/wiki"),h(pe,"rel","nofollow"),h(me,"href","https://www.liquibase.com/download"),h(me,"rel","nofollow"),h(be,"href","https://docs.liquibase.com/workflows/liquibase-community/home.html"),h(be,"rel","nofollow"),h(ge,"href","https://github.com/testcontainers"),h(ge,"rel","nofollow"),h(ye,"href","https://github.com/dineug/erd-editor/blob/master/packages/sql-ddl-parser/src/SQL_DDL_Test_Case.md"),h(ye,"rel","nofollow"),h(Ee,"href","https://www.liquibase.com/how-liquibase-works"),h(Ee,"rel","nofollow"),h(He,"class","language-undefined"),h(we,"href","https://hub.docker.com/_/microsoft-mssql-server"),h(we,"rel","nofollow"),h(_e,"href","https://docs.liquibase.com/workflows/liquibase-community/using-liquibase-and-docker.html"),h(_e,"rel","nofollow"),h(Ue,"class","language-c#"),h(Ke,"class","language-c#"),h(Ye,"class","language-c#"),h(De,"href","https://github.com/dotnet/SqlClient/issues/1930"),h(De,"rel","nofollow")},m(l,u){d(l,z,u),e(z,Lo),d(l,to,u),d(l,Q,u),e(Q,To),e(Q,Ao),e(Q,Bo),e(Q,xo),e(Q,Ro),d(l,oo,u),d(l,Le,u),e(Le,Oo),d(l,io,u),d(l,k,u),e(k,X),e(X,tt),e(tt,Fo),e(X,Po),e(X,Mo),e(X,Qo),e(k,No),e(k,N),e(N,ot),e(ot,Wo),e(N,jo),e(N,Go),e(N,Ho),e(N,Vo),e(N,Uo),e(k,Ko),e(k,Z),e(Z,it),e(it,Yo),e(Z,Jo),e(Z,zo),e(Z,Xo),e(k,Zo),e(k,B),e(B,at),e(at,$o),e(B,ei),e(B,ti),e(B,oi),e(B,ae),e(ae,ii),e(B,ai),e(B,se),e(se,si),e(B,li),e(k,ni),e(k,Te),e(Te,st),e(st,ri),e(Te,ci),d(l,ao,u),d(l,Ae,u),e(Ae,ui),d(l,so,u),d(l,Be,u),e(Be,di),d(l,lo,u),d(l,q,u),e(q,hi),e(q,le),e(le,fi),e(q,pi),e(q,ne),e(ne,mi),e(q,bi),e(q,re),e(re,gi),e(q,vi),e(q,ce),e(ce,yi),e(q,Ei),e(q,wi),e(q,_i),d(l,no,u),d(l,x,u),e(x,lt),e(lt,qi),e(x,Ii),e(x,nt),e(nt,Di),e(x,Ci),e(x,rt),e(rt,ki),e(x,Si),e(x,ct),e(ct,Li),d(l,ro,u),d(l,xe,u),e(xe,Ti),d(l,co,u),d(l,$,u),e($,Ai),e($,Bi),e($,xi),d(l,uo,u),d(l,I,u),e(I,ut),e(ut,Ri),e(I,Oi),e(I,Re),e(Re,ue),e(ue,Fi),e(Re,Pi),e(I,Mi),e(I,Oe),e(Oe,de),e(de,Qi),e(Oe,Ni),e(I,Wi),e(I,Fe),e(Fe,he),e(he,ji),e(Fe,Gi),e(I,Hi),e(I,Pe),e(Pe,fe),e(fe,Vi),e(Pe,Ui),e(I,Ki),e(I,Me),e(Me,pe),e(pe,Yi),e(Me,Ji),d(l,ho,u),d(l,W,u),e(W,zi),e(W,me),e(me,Xi),e(W,Zi),e(W,be),e(be,$i),e(W,ea),d(l,fo,u),d(l,Qe,u),e(Qe,ta),d(l,po,u),d(l,R,u),e(R,oa),e(R,ge),e(ge,ia),e(R,aa),e(R,sa),e(R,la),e(R,na),e(R,ra),d(l,mo,u),d(l,Ne,u),e(Ne,ca),d(l,bo,u),d(l,We,u),e(We,ua),d(l,go,u),d(l,je,u),e(je,da),d(l,vo,u),d(l,f,u),e(f,dt),e(dt,ha),e(f,fa),e(f,ee),e(ee,pa),e(ee,ma),e(ee,ba),e(ee,ht),e(ht,ga),e(f,va),e(f,Ge),e(Ge,ya),e(Ge,ft),e(ft,Ea),e(f,wa),e(f,pt),e(pt,_a),e(f,qa),e(f,ve),e(ve,Ia),e(ve,mt),e(mt,Da),e(ve,Ca),e(f,ka),e(f,g),e(g,Sa),e(g,La),e(g,Ta),e(g,ye),e(ye,Aa),e(g,Ba),e(g,xa),e(g,Ra),e(g,bt),e(bt,Oa),e(g,Fa),e(g,gt),e(gt,Pa),e(g,Ma),e(g,vt),e(vt,Qa),e(g,Na),e(g,yt),e(yt,Wa),e(g,ja),e(g,Ga),e(g,Ha),e(f,Va),e(f,y),e(y,Ua),e(y,Ka),e(y,Ya),e(y,Et),e(Et,Ja),e(y,za),e(y,Xa),e(y,Za),e(y,Ee),e(Ee,$a),e(y,es),e(y,ts),e(y,os),e(y,is),e(y,wt),e(wt,as),e(y,ss),e(f,ls),e(f,_),e(_,ns),e(_,_t),e(_t,rs),e(_,cs),e(_,He),He.innerHTML=ic,e(_,us),e(_,we),e(we,ds),e(_,hs),e(_,_e),e(_e,fs),e(_,ps),e(_,ms),e(_,bs),e(_,qt),e(qt,gs),e(_,vs),e(f,ys),e(f,p),e(p,Es),e(p,ws),e(p,_s),e(p,It),e(It,qs),e(p,Is),e(p,Ds),e(p,Dt),e(Dt,Cs),e(p,ks),e(p,Ss),e(p,Ls),e(p,Ct),e(Ct,Ts),e(p,As),e(p,Bs),e(p,xs),e(p,kt),e(kt,Rs),e(p,Os),e(p,Fs),e(p,Ps),e(p,St),e(St,Ms),e(p,Qs),e(p,Ns),e(p,Ws),e(p,Lt),e(Lt,js),e(p,Gs),e(f,Hs),e(f,v),e(v,Vs),e(v,Us),e(v,Ks),e(v,Tt),e(Tt,Ys),e(v,Js),e(v,zs),e(v,At),e(At,Xs),e(v,Zs),e(v,$s),e(v,Bt),e(Bt,el),e(v,tl),e(v,xt),e(xt,ol),e(v,il),e(v,al),e(v,Rt),e(Rt,sl),e(v,ll),e(v,nl),e(f,rl),e(f,j),e(j,cl),e(j,ul),e(j,dl),e(j,Ot),e(Ot,hl),e(j,fl),e(j,pl),e(f,ml),e(f,Ft),e(Ft,bl),d(l,yo,u),d(l,Ve,u),e(Ve,gl),d(l,Eo,u),d(l,O,u),e(O,G),e(G,vl),e(G,Pt),e(Pt,yl),e(G,El),e(G,Mt),e(Mt,wl),e(G,_l),e(G,Ue),Ue.innerHTML=ac,e(O,ql),e(O,F),e(F,Il),e(F,Qt),e(Qt,Dl),e(F,Cl),e(F,Nt),e(Nt,kl),e(F,Sl),e(F,Ll),e(F,Tl),e(F,L),e(L,qe),e(qe,Al),e(qe,Wt),e(Wt,Bl),e(qe,xl),e(L,Rl),e(L,jt),e(jt,Ol),e(L,Fl),e(L,Ie),e(Ie,Pl),e(Ie,Gt),e(Gt,Ml),e(Ie,Ql),e(L,Nl),e(L,Ht),e(Ht,Wl),e(L,jl),e(L,Vt),e(Vt,Gl),e(O,Hl),e(O,D),e(D,Vl),e(D,Ut),e(Ut,Ul),e(D,Kl),e(D,Kt),e(Kt,Yl),e(D,Jl),e(D,zl),e(D,Xl),e(D,Zl),e(D,$l),e(D,en),e(D,tn),e(D,Ke),Ke.innerHTML=sc,e(O,on),e(O,T),e(T,an),e(T,Yt),e(Yt,sn),e(T,ln),e(T,Jt),e(Jt,nn),e(T,rn),e(T,zt),e(zt,cn),e(T,un),e(T,dn),e(T,Ye),Ye.innerHTML=lc,d(l,wo,u),d(l,Je,u),e(Je,hn),d(l,_o,u),d(l,H,u),e(H,fn),e(H,De),e(De,pn),e(H,mn),e(H,Xt),e(Xt,bn),e(H,gn),d(l,qo,u),d(l,ze,u),e(ze,vn),d(l,Io,u),d(l,Xe,u),e(Xe,yn)},p:kn,i:kn,o:kn,d(l){l&&i(z),l&&i(to),l&&i(Q),l&&i(oo),l&&i(Le),l&&i(io),l&&i(k),l&&i(ao),l&&i(Ae),l&&i(so),l&&i(Be),l&&i(lo),l&&i(q),l&&i(no),l&&i(x),l&&i(ro),l&&i(xe),l&&i(co),l&&i($),l&&i(uo),l&&i(I),l&&i(ho),l&&i(W),l&&i(fo),l&&i(Qe),l&&i(po),l&&i(R),l&&i(mo),l&&i(Ne),l&&i(bo),l&&i(We),l&&i(go),l&&i(je),l&&i(vo),l&&i(f),l&&i(yo),l&&i(Ve),l&&i(Eo),l&&i(O),l&&i(wo),l&&i(Je),l&&i(_o),l&&i(H),l&&i(qo),l&&i(ze),l&&i(Io),l&&i(Xe)}}}class bc extends dc{constructor(z){super(),hc(this,z,null,pc,fc,{})}}export{bc as default};
