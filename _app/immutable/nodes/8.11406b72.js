import{s as G,n as g}from"../chunks/scheduler.63274e7e.js";import{S as q,i as Y,g as r,s as d,H as L,h as i,z as T,c as y,j as v,B as S,f as a,k as N,a as t}from"../chunks/index.d9809aad.js";function D(M){let p,I=`This can be useful for situations where you wish to generate a report for a manually selected set of individuals.<br/>
I first used this in conjunction with a tabular form with checkbox in Oracle Application Express.<br/>
It simply parses a comma-separated string e.g. \\‘23,45,67,999,20483\\’ into a \\“table\\” of values which can be used by an IN statement.<br/>
Rather than having to filter on a function which converts a demilited string into a set of rows, the following query can be used directly.<br/>
Just remember to add a comment to that effect, this isn’t easy to read at a glance.`,m,e,O="Query",w,o,E,B=`<code class="language-plsql"><span class="token keyword">SELECT</span> SUBSTR <span class="token punctuation">(</span>strCSV<span class="token punctuation">,</span>
               INSTR <span class="token punctuation">(</span>strCSV<span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">LEVEL</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
               INSTR <span class="token punctuation">(</span>strCSV<span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">LEVEL</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> INSTR <span class="token punctuation">(</span>strCSV<span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">LEVEL</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
              <span class="token punctuation">)</span> <span class="token keyword">as</span> fieldname
<span class="token keyword">FROM</span>  <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token string">','</span><span class="token operator">||</span>&amp;<span class="token keyword">STRING</span><span class="token operator">||</span><span class="token string">','</span> strCSV
       <span class="token keyword">FROM</span>   dual<span class="token punctuation">)</span>
<span class="token keyword">CONNECT</span> <span class="token keyword">BY</span> <span class="token keyword">LEVEL</span> <span class="token operator">&lt;=</span> <span class="token keyword">LENGTH</span><span class="token punctuation">(</span>&amp;<span class="token keyword">STRING</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">LENGTH</span><span class="token punctuation">(</span>REPLACE<span class="token punctuation">(</span>&amp;<span class="token keyword">STRING</span><span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> fieldname</code>`,_,c,x="An alternative is available in the DBMS_UTILITY package",f,l,b,F=`<code class="language-plsql"><span class="token keyword">DECLARE</span>
  v_arr dbms_utility<span class="token punctuation">.</span>uncl_array<span class="token punctuation">;</span>
  v_cnt BINARY_INTEGER<span class="token punctuation">;</span>
<span class="token keyword">BEGIN</span>
  dbms_utility<span class="token punctuation">.</span>comma_to_table<span class="token punctuation">(</span><span class="token string">'A,B,C,F,D'</span><span class="token punctuation">,</span>v_cnt<span class="token punctuation">,</span>v_arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">FOR</span> i <span class="token keyword">IN</span> <span class="token number">1</span> <span class="token operator">..</span> v_cnt <span class="token keyword">LOOP</span>
    dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span>v_arr<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">END</span> <span class="token keyword">loop</span><span class="token punctuation">;</span>
<span class="token keyword">END</span><span class="token punctuation">;</span></code>`,C,k,A="Use this method to parse initials from a full name (experimental)",h,u,R,V=`<code class="language-plsql"><span class="token keyword">WITH</span> <span class="token keyword">data</span>
<span class="token keyword">AS</span>   <span class="token punctuation">(</span><span class="token keyword">SELECT</span> fieldname
      <span class="token punctuation">,</span>      order_by
      <span class="token keyword">FROM</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> UPPER<span class="token punctuation">(</span>SUBSTR <span class="token punctuation">(</span>forenames<span class="token punctuation">,</span> INSTR <span class="token punctuation">(</span>forenames<span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">LEVEL</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> fieldname
            <span class="token punctuation">,</span>      <span class="token keyword">level</span>                                                               order_by
            <span class="token keyword">FROM</span>  <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token string">' '</span><span class="token operator">||</span>&amp;FNAME<span class="token operator">||</span><span class="token string">' '</span> forenames
                   <span class="token keyword">FROM</span>   dual
                  <span class="token punctuation">)</span>
            <span class="token keyword">CONNECT</span> <span class="token keyword">BY</span> <span class="token keyword">LEVEL</span> <span class="token operator">&lt;=</span> <span class="token keyword">LENGTH</span><span class="token punctuation">(</span>&amp;FNAME<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">LENGTH</span><span class="token punctuation">(</span>REPLACE<span class="token punctuation">(</span>&amp;FNAME<span class="token punctuation">,</span><span class="token string">' '</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>
           <span class="token punctuation">)</span>
      <span class="token punctuation">)</span>
<span class="token keyword">SELECT</span> REGEXP_REPLACE<span class="token punctuation">(</span>REPLACE<span class="token punctuation">(</span>SYS_CONNECT_BY_PATH<span class="token punctuation">(</span>fieldname<span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'( )&#123;1,&#125;'</span><span class="token punctuation">)</span> initials
<span class="token keyword">FROM</span>   <span class="token keyword">data</span>
<span class="token keyword">WHERE</span>  order_by <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>order_by<span class="token punctuation">)</span>
                   <span class="token keyword">FROM</span>   <span class="token keyword">data</span><span class="token punctuation">)</span>
<span class="token keyword">START</span> <span class="token keyword">WITH</span> order_by <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">CONNECT</span> <span class="token keyword">BY</span> <span class="token keyword">PRIOR</span> order_by <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">=</span> order_by</code>`;return{c(){p=r("p"),p.innerHTML=I,m=d(),e=r("h4"),e.textContent=O,w=d(),o=r("pre"),E=new L(!1),_=d(),c=r("h4"),c.textContent=x,f=d(),l=r("pre"),b=new L(!1),C=d(),k=r("h3"),k.textContent=A,h=d(),u=r("pre"),R=new L(!1),this.h()},l(s){p=i(s,"P",{"data-svelte-h":!0}),T(p)!=="svelte-1vft9ht"&&(p.innerHTML=I),m=y(s),e=i(s,"H4",{"data-svelte-h":!0}),T(e)!=="svelte-ucmevi"&&(e.textContent=O),w=y(s),o=i(s,"PRE",{class:!0});var n=v(o);E=S(n,!1),n.forEach(a),_=y(s),c=i(s,"H4",{"data-svelte-h":!0}),T(c)!=="svelte-65krwk"&&(c.textContent=x),f=y(s),l=i(s,"PRE",{class:!0});var H=v(l);b=S(H,!1),H.forEach(a),C=y(s),k=i(s,"H3",{"data-svelte-h":!0}),T(k)!=="svelte-imtz75"&&(k.textContent=A),h=y(s),u=i(s,"PRE",{class:!0});var P=v(u);R=S(P,!1),P.forEach(a),this.h()},h(){E.a=null,N(o,"class","language-plsql"),b.a=null,N(l,"class","language-plsql"),R.a=null,N(u,"class","language-plsql")},m(s,n){t(s,p,n),t(s,m,n),t(s,e,n),t(s,w,n),t(s,o,n),E.m(B,o),t(s,_,n),t(s,c,n),t(s,f,n),t(s,l,n),b.m(F,l),t(s,C,n),t(s,k,n),t(s,h,n),t(s,u,n),R.m(V,u)},p:g,i:g,o:g,d(s){s&&(a(p),a(m),a(e),a(w),a(o),a(_),a(c),a(f),a(l),a(C),a(k),a(h),a(u))}}}class j extends q{constructor(p){super(),Y(this,p,null,D,G,{})}}export{j as component};
