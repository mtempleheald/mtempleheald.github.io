import{a as n,t as a}from"../chunks/disclose-version.1SaWgZ9i.js";import"../chunks/legacy.8a7pGasK.js";import{s,f as r,i as l,r as h,g as u}from"../chunks/runtime.B66Dd-K4.js";import{h as p}from"../chunks/html.DcSxObny.js";var d=a(`<h1>Headless CMS</h1> <p>I’ve been working on a 100% data-driven, low code solution using SvelteKit.<br> I’ve been debating rolling my own highly specialised CMS admin pages vs using an off the shelf headless CMS.</p> <h2>The requirements</h2> <ol><li>Data structure</li></ol> <p>Must support a data structure similar to the below.<br> All levels in the hierarchy can repeat, components of any type can be swapped in and out and everything can be reordered.</p> <pre class="language-undefined"><!></pre> <ol start="2"><li>REST API</li></ol> <p>GraphQL may be better, but it adds complexity and security concerns, I want this to be as simple as possible.
The data structure should look similar to above without requiring significant knowledge of the inner workings of the CMS.</p> <ol start="4"><li>Ease of use</li></ol> <p>The content editor needs to understand context at all times.<br> e.g. We are editing a section within page X, journey A, not editing a section then going to find a page to link it to.<br> This is important for scalability and to reduce human errors.</p> <ol start="5"><li>Safety</li></ol> <p>Developers must be able to edit content types, and content editors must be able to edit content using these types, without ever losing data.<br> This is important for deployment and publishing purposes.</p> <ol start="6"><li>Versioning</li></ol> <p>Relating to safety but more about compliance; we must be able to view the change history for content and rollback if necessary.</p> <ol><li>Lightweight</li></ol> <p>I want a pure headless solution, not a full solution that I’m only using the headless features of.<br> This is for security, upgrade, complexity reasons but should also keep costs down.</p> <ol start="8"><li>Hosting</li></ol> <p>I know how to host .NET and Node apps, either will suffice. As long as it is secure. No PHP.</p> <h1>The contenders</h1> <p>Starting with free options, because why wouldn’t you?<br> I deliberately timeboxed this work to a few hours per option.<br> If a competent developer can’t get to grips with managing a basic structure in a few hours then content editors won’t be able to work with it.</p> <h2>Strapi</h2> <p>Pros:</p> <ul><li>Top of the most popular list on <a href="https://jamstack.org/headless-cms/" rel="nofollow">Jamstack</a>.</li> <li>Free (until you want granular controls or SSO)</li> <li>Open Source MIT licence</li> <li>Very easy to get started, up and running in under 20 minutes from nothing but a node command line</li> <li>REST API extremely easy to use, up and running locally in under an hour with token authentication allowing me to grab a draft page by url and related journey.</li> <li>Easy to see what’s going on with the content types appearing in the code as JSON schemas with boilerplate API wrappers</li></ul> <p>Cons:</p> <ul><li>Can only nest components one deep using the dynamic zone feature.<br> This means that managing components within sections is nice, but linking these back up to pages and those back up to journeys is cumbersome.<br> The relationship feature can make this work, but it seems you have to manage the one-to-many side of the relationship and also the many-to-one side, i.e. list pages within journey and link page back to parent journey.</li> <li>Search filters are lost during navigation.
I’m not sure if this is a bad thing, but it frustrated me during my brief trial.</li> <li>Interface is clunky. It never let me break anything or lose changes, but I had to try, see the popup and remember to save rather than this being immediately apparent.</li> <li>The first thing I tried to do was create a component with an id.<br> This clashed with the id added by default, something of an oversight if you ask me.</li> <li>Creating content types writes JSON files to disk, in the solution, so presumably I’d deploy this the way I would any other web app, from git.
Content writes to database.
I fail to see the connection between these which makes me worry about deployment safety.<br> This correlates with many comments regarding Strapi too; deployments breaking sites.</li></ul> <p>Conclusion:</p> <p>Nice try but not good enough yet.
I like how it feels, I like the simplicity, but it needs that extra depth in the hierarchy and some refinements.</p> <h2>OrchardCore</h2> <p>Pros:</p> <ul><li>Free</li> <li>Open source BSD3 licence</li> <li>Written in .NET which is in my tech stack already</li> <li>Once I figured out the built in Bag and Title content parts it was very easy to get exactly the structure I was looking for</li> <li>Security taken seriously, countless authentication options with details of openid</li> <li>I already know how to implement SSO with Azure AD in .NET Core so that’s one problem I don’t have to worry about.</li></ul> <p>Cons:</p> <ul><li>Documentation is thorough yet many broken links, including the video to getting started with headless CMS in OrchardCore.
I didn’t see <a href="https://docs.orchardcore.net/en/latest/docs/getting-started/" rel="nofollow">this</a> at first.<br> Why they’d make download more prominent I have no idea, I ended up just taking full latest source code as my basis for trial.</li> <li>Headless content APIs not as easy to use as Strapi, nor as easy to integrate with.
Just for trial purposes I set up token authentication and this achieved my goal of pulling down some content.</li> <li>REST APIs rather limited, only allowing reference by ID at first glance.
Possible to use Queries instead of going straight to content, but this requires configuring Lucene indexes etc (TODO)</li></ul> <p>Conclusion:</p> <p>I like it at a glance, have no concerns about scalability or usability.<br> The API/Query complexity makes me wary - anytime there’s an index/cache involved things start getting complicated.<br> I will complete the API PoC work, use the NuGet-driven setup process and re-evaluate.</p>`,1);function b(i){var e=d(),t=s(r(e),10),o=l(t);p(o,()=>`<code class="language-undefined">- journey
  - page
    - section
      - component
    - repeating group
      - section
        - component</code>`),h(t),u(56),n(i,e)}export{b as component};
