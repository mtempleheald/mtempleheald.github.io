import{a as i,t as d}from"../chunks/disclose-version.BZtIaq82.js";import"../chunks/legacy.CtV6FHWp.js";import{s as a,f as y,i as p,r as t}from"../chunks/runtime.BZuNgBny.js";import{h as o}from"../chunks/html.BY5OYTWt.js";var w=d('<p>This can be useful for situations where you wish to generate a report for a manually selected set of individuals.<br> I first used this in conjunction with a tabular form with checkbox in Oracle Application Express.<br> It simply parses a comma-separated string e.g. \\‘23,45,67,999,20483\\’ into a \\“table\\” of values which can be used by an IN statement.<br> Rather than having to filter on a function which converts a demilited string into a set of rows, the following query can be used directly.<br> Just remember to add a comment to that effect, this isn’t easy to read at a glance.</p> <h4>Query</h4> <pre class="language-plsql"><!></pre> <h4>An alternative is available in the DBMS_UTILITY package</h4> <pre class="language-plsql"><!></pre> <h3>Use this method to parse initials from a full name (experimental)</h3> <pre class="language-plsql"><!></pre>',1);function R(l){var e=w(),s=a(y(e),4),k=p(s);o(k,()=>`<code class="language-plsql"><span class="token keyword">SELECT</span> SUBSTR <span class="token punctuation">(</span>strCSV<span class="token punctuation">,</span>
               INSTR <span class="token punctuation">(</span>strCSV<span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">LEVEL</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
               INSTR <span class="token punctuation">(</span>strCSV<span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">LEVEL</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> INSTR <span class="token punctuation">(</span>strCSV<span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">LEVEL</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
              <span class="token punctuation">)</span> <span class="token keyword">as</span> fieldname
<span class="token keyword">FROM</span>  <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token string">','</span><span class="token operator">||</span>&amp;<span class="token keyword">STRING</span><span class="token operator">||</span><span class="token string">','</span> strCSV
       <span class="token keyword">FROM</span>   dual<span class="token punctuation">)</span>
<span class="token keyword">CONNECT</span> <span class="token keyword">BY</span> <span class="token keyword">LEVEL</span> <span class="token operator">&lt;=</span> <span class="token keyword">LENGTH</span><span class="token punctuation">(</span>&amp;<span class="token keyword">STRING</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">LENGTH</span><span class="token punctuation">(</span>REPLACE<span class="token punctuation">(</span>&amp;<span class="token keyword">STRING</span><span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> fieldname</code>`),t(s);var n=a(s,4),u=p(n);o(u,()=>`<code class="language-plsql"><span class="token keyword">DECLARE</span>
  v_arr dbms_utility<span class="token punctuation">.</span>uncl_array<span class="token punctuation">;</span>
  v_cnt BINARY_INTEGER<span class="token punctuation">;</span>
<span class="token keyword">BEGIN</span>
  dbms_utility<span class="token punctuation">.</span>comma_to_table<span class="token punctuation">(</span><span class="token string">'A,B,C,F,D'</span><span class="token punctuation">,</span>v_cnt<span class="token punctuation">,</span>v_arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">FOR</span> i <span class="token keyword">IN</span> <span class="token number">1</span> <span class="token operator">..</span> v_cnt <span class="token keyword">LOOP</span>
    dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span>v_arr<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">END</span> <span class="token keyword">loop</span><span class="token punctuation">;</span>
<span class="token keyword">END</span><span class="token punctuation">;</span></code>`),t(n);var c=a(n,4),r=p(c);o(r,()=>`<code class="language-plsql"><span class="token keyword">WITH</span> <span class="token keyword">data</span>
<span class="token keyword">AS</span>   <span class="token punctuation">(</span><span class="token keyword">SELECT</span> fieldname
      <span class="token punctuation">,</span>      order_by
      <span class="token keyword">FROM</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> UPPER<span class="token punctuation">(</span>SUBSTR <span class="token punctuation">(</span>forenames<span class="token punctuation">,</span> INSTR <span class="token punctuation">(</span>forenames<span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">LEVEL</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> fieldname
            <span class="token punctuation">,</span>      <span class="token keyword">level</span>                                                               order_by
            <span class="token keyword">FROM</span>  <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token string">' '</span><span class="token operator">||</span>&amp;FNAME<span class="token operator">||</span><span class="token string">' '</span> forenames
                   <span class="token keyword">FROM</span>   dual
                  <span class="token punctuation">)</span>
            <span class="token keyword">CONNECT</span> <span class="token keyword">BY</span> <span class="token keyword">LEVEL</span> <span class="token operator">&lt;=</span> <span class="token keyword">LENGTH</span><span class="token punctuation">(</span>&amp;FNAME<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">LENGTH</span><span class="token punctuation">(</span>REPLACE<span class="token punctuation">(</span>&amp;FNAME<span class="token punctuation">,</span><span class="token string">' '</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>
           <span class="token punctuation">)</span>
      <span class="token punctuation">)</span>
<span class="token keyword">SELECT</span> REGEXP_REPLACE<span class="token punctuation">(</span>REPLACE<span class="token punctuation">(</span>SYS_CONNECT_BY_PATH<span class="token punctuation">(</span>fieldname<span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'( )&#123;1,&#125;'</span><span class="token punctuation">)</span> initials
<span class="token keyword">FROM</span>   <span class="token keyword">data</span>
<span class="token keyword">WHERE</span>  order_by <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>order_by<span class="token punctuation">)</span>
                   <span class="token keyword">FROM</span>   <span class="token keyword">data</span><span class="token punctuation">)</span>
<span class="token keyword">START</span> <span class="token keyword">WITH</span> order_by <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">CONNECT</span> <span class="token keyword">BY</span> <span class="token keyword">PRIOR</span> order_by <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">=</span> order_by</code>`),t(c),i(l,e)}export{R as component};
