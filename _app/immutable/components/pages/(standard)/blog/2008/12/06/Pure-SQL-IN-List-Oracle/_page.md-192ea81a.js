import{S as X,i as z,s as K,k as o,q as l,a as E,l as c,m as d,r as k,h as a,c as f,n as F,b as p,G as e,A as x}from"../../../../../../../../chunks/index-a822e1e3.js";function Z(Y){let t,S,v,N,C,I,g,A,O,B,b,y,M,_,u,D=`<code class="language-plsql"><span class="token keyword">SELECT</span> SUBSTR <span class="token punctuation">(</span>strCSV<span class="token punctuation">,</span>
               INSTR <span class="token punctuation">(</span>strCSV<span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">LEVEL</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
               INSTR <span class="token punctuation">(</span>strCSV<span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">LEVEL</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> INSTR <span class="token punctuation">(</span>strCSV<span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">LEVEL</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
              <span class="token punctuation">)</span> <span class="token keyword">as</span> fieldname
<span class="token keyword">FROM</span>  <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token string">','</span><span class="token operator">||</span>&amp;<span class="token keyword">STRING</span><span class="token operator">||</span><span class="token string">','</span> strCSV
       <span class="token keyword">FROM</span>   dual<span class="token punctuation">)</span>
<span class="token keyword">CONNECT</span> <span class="token keyword">BY</span> <span class="token keyword">LEVEL</span> <span class="token operator">&lt;=</span> <span class="token keyword">LENGTH</span><span class="token punctuation">(</span>&amp;<span class="token keyword">STRING</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">LENGTH</span><span class="token punctuation">(</span>REPLACE<span class="token punctuation">(</span>&amp;<span class="token keyword">STRING</span><span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> fieldname</code>`,h,m,P,R,r,U=`<code class="language-plsql"><span class="token keyword">DECLARE</span>
  v_arr dbms_utility<span class="token punctuation">.</span>uncl_array<span class="token punctuation">;</span>
  v_cnt BINARY_INTEGER<span class="token punctuation">;</span>
<span class="token keyword">BEGIN</span>
  dbms_utility<span class="token punctuation">.</span>comma_to_table<span class="token punctuation">(</span><span class="token string">'A,B,C,F,D'</span><span class="token punctuation">,</span>v_cnt<span class="token punctuation">,</span>v_arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">FOR</span> i <span class="token keyword">IN</span> <span class="token number">1</span> <span class="token operator">..</span> v_cnt <span class="token keyword">LOOP</span>
    dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span>v_arr<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">END</span> <span class="token keyword">loop</span><span class="token punctuation">;</span>
<span class="token keyword">END</span><span class="token punctuation">;</span></code>`,T,w,H,L,i,W=`<code class="language-plsql"><span class="token keyword">WITH</span> <span class="token keyword">data</span>
<span class="token keyword">AS</span>   <span class="token punctuation">(</span><span class="token keyword">SELECT</span> fieldname
      <span class="token punctuation">,</span>      order_by
      <span class="token keyword">FROM</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> UPPER<span class="token punctuation">(</span>SUBSTR <span class="token punctuation">(</span>forenames<span class="token punctuation">,</span> INSTR <span class="token punctuation">(</span>forenames<span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">LEVEL</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> fieldname
            <span class="token punctuation">,</span>      <span class="token keyword">level</span>                                                               order_by
            <span class="token keyword">FROM</span>  <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token string">' '</span><span class="token operator">||</span>&amp;FNAME<span class="token operator">||</span><span class="token string">' '</span> forenames
                   <span class="token keyword">FROM</span>   dual
                  <span class="token punctuation">)</span>
            <span class="token keyword">CONNECT</span> <span class="token keyword">BY</span> <span class="token keyword">LEVEL</span> <span class="token operator">&lt;=</span> <span class="token keyword">LENGTH</span><span class="token punctuation">(</span>&amp;FNAME<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">LENGTH</span><span class="token punctuation">(</span>REPLACE<span class="token punctuation">(</span>&amp;FNAME<span class="token punctuation">,</span><span class="token string">' '</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>
           <span class="token punctuation">)</span>
      <span class="token punctuation">)</span>
<span class="token keyword">SELECT</span> REGEXP_REPLACE<span class="token punctuation">(</span>REPLACE<span class="token punctuation">(</span>SYS_CONNECT_BY_PATH<span class="token punctuation">(</span>fieldname<span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'( )&#123;1,&#125;'</span><span class="token punctuation">)</span> initials
<span class="token keyword">FROM</span>   <span class="token keyword">data</span>
<span class="token keyword">WHERE</span>  order_by <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>order_by<span class="token punctuation">)</span>
                   <span class="token keyword">FROM</span>   <span class="token keyword">data</span><span class="token punctuation">)</span>
<span class="token keyword">START</span> <span class="token keyword">WITH</span> order_by <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">CONNECT</span> <span class="token keyword">BY</span> <span class="token keyword">PRIOR</span> order_by <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">=</span> order_by</code>`;return{c(){t=o("p"),S=l("This can be useful for situations where you wish to generate a report for a manually selected set of individuals."),v=o("br"),N=l(`
I first used this in conjunction with a tabular form with checkbox in Oracle Application Express.`),C=o("br"),I=l(`
It simply parses a comma-separated string e.g. \\\u201823,45,67,999,20483\\\u2019 into a \\\u201Ctable\\\u201D of values which can be used by an IN statement.`),g=o("br"),A=l(`
Rather than having to filter on a function which converts a demilited string into a set of rows, the following query can be used directly.`),O=o("br"),B=l(`
Just remember to add a comment to that effect, this isn\u2019t easy to read at a glance.`),b=E(),y=o("h4"),M=l("Query"),_=E(),u=o("pre"),h=E(),m=o("h4"),P=l("An alternative is available in the DBMS_UTILITY package"),R=E(),r=o("pre"),T=E(),w=o("h3"),H=l("Use this method to parse initials from a full name (experimental)"),L=E(),i=o("pre"),this.h()},l(s){t=c(s,"P",{});var n=d(t);S=k(n,"This can be useful for situations where you wish to generate a report for a manually selected set of individuals."),v=c(n,"BR",{}),N=k(n,`
I first used this in conjunction with a tabular form with checkbox in Oracle Application Express.`),C=c(n,"BR",{}),I=k(n,`
It simply parses a comma-separated string e.g. \\\u201823,45,67,999,20483\\\u2019 into a \\\u201Ctable\\\u201D of values which can be used by an IN statement.`),g=c(n,"BR",{}),A=k(n,`
Rather than having to filter on a function which converts a demilited string into a set of rows, the following query can be used directly.`),O=c(n,"BR",{}),B=k(n,`
Just remember to add a comment to that effect, this isn\u2019t easy to read at a glance.`),n.forEach(a),b=f(s),y=c(s,"H4",{});var G=d(y);M=k(G,"Query"),G.forEach(a),_=f(s),u=c(s,"PRE",{class:!0});var j=d(u);j.forEach(a),h=f(s),m=c(s,"H4",{});var V=d(m);P=k(V,"An alternative is available in the DBMS_UTILITY package"),V.forEach(a),R=f(s),r=c(s,"PRE",{class:!0});var J=d(r);J.forEach(a),T=f(s),w=c(s,"H3",{});var q=d(w);H=k(q,"Use this method to parse initials from a full name (experimental)"),q.forEach(a),L=f(s),i=c(s,"PRE",{class:!0});var Q=d(i);Q.forEach(a),this.h()},h(){F(u,"class","language-plsql"),F(r,"class","language-plsql"),F(i,"class","language-plsql")},m(s,n){p(s,t,n),e(t,S),e(t,v),e(t,N),e(t,C),e(t,I),e(t,g),e(t,A),e(t,O),e(t,B),p(s,b,n),p(s,y,n),e(y,M),p(s,_,n),p(s,u,n),u.innerHTML=D,p(s,h,n),p(s,m,n),e(m,P),p(s,R,n),p(s,r,n),r.innerHTML=U,p(s,T,n),p(s,w,n),e(w,H),p(s,L,n),p(s,i,n),i.innerHTML=W},p:x,i:x,o:x,d(s){s&&a(t),s&&a(b),s&&a(y),s&&a(_),s&&a(u),s&&a(h),s&&a(m),s&&a(R),s&&a(r),s&&a(T),s&&a(w),s&&a(L),s&&a(i)}}}class ss extends X{constructor(t){super(),z(this,t,null,Z,K,{})}}export{ss as default};
