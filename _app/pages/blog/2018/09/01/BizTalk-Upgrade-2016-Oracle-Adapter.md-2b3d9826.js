import{S as tl,i as ll,s as al,e as s,t as r,k as f,c as i,a as n,h as c,d as t,m as p,b as I,g as o,F as l,G as Ot}from"../../../../../chunks/vendor-dc71a660.js";function sl(Jt){let d,Ae,Ie,Pe,le,P,Ce,ae,k,Qt=`<code class="language-undefined">System.IO.FileNotFoundException: Could not load file or assembly 
&#39;Oracle.DataAccess, Version=4.121.1.0, Culture=neutral, PublicKeyToken=89b483f429c47342&#39; 
or one of its dependencies. The system cannot find the file specified.</code>`,se,C,Re,ie,R,Le,oe,_,h,De,T,ze,Se,F,V,Ne,We,L,Ge,q,K,He,re,D,Me,ne,w,X,Ue,Fe,j,Ve,ce,u,qe,Ke,Xe,je,Je,fe,v,J,Qe,Ye,Q,Ze,$e,Y,ge,pe,z,et,de,S,tt,ue,O,Yt=`<code class="language-undefined">C:WindowsMicrosoft.NETassemblyGAC_32Oracle.DataAccess\v4.0_4.121.2.0__89b483f429c47342   
C:WindowsMicrosoft.NETassemblyGAC_64Oracle.DataAccess\v4.0_4.112.2.0__89b483f429c47342  
C:WindowsMicrosoft.NETassemblyGAC_32Policy.4.121.Oracle.DataAccess\v4.0_4.121.2.0__89b483f429c47342 </code>`,ve,N,lt,be,x,Zt='<code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bindingRedirect</span> <span class="token attr-name">oldVersion</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4.121.0.0-4.121.2.0<span class="token punctuation">"</span></span> <span class="token attr-name">newVersion</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4.121.2.0<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> </code>',me,E,at,st,it,_e,y,ot,B,rt,nt,he,W,ct,we,m,ft,Z,pt,dt,$,ut,Ee,A,vt,g,bt,ye,G,mt,ke,b,_t,ht,wt,Et,yt;return{c(){d=s("p"),Ae=r("I was recently involved in an upgrade from BizTalk 2013 to BizTalk 2016."),Ie=s("br"),Pe=r(`
After upgrade all of our SpecFlow system tests started failing.`),le=f(),P=s("p"),Ce=r("The error manifests itself in the Event Viewer Application Logs as:"),ae=f(),k=s("pre"),se=f(),C=s("h3"),Re=r("Dependencies"),ie=f(),R=s("p"),Le=r("So I dug into this in order to understand the problem and how to fix it, it turns out that:"),oe=f(),_=s("ul"),h=s("li"),De=r("Biztalk 2013 has a dependency on "),T=s("a"),ze=r("Oracle Data Provider for .NET"),Se=r(" version 11.2.  "),F=s("ul"),V=s("li"),Ne=r("Oracle version 11.2.0.x.x == Oracle.dataaccess.dll 4.112.x.x"),We=f(),L=s("li"),Ge=r("BizTalk 2016 has the same dependency but on Oracle version 12.1."),q=s("ul"),K=s("li"),He=r("Oracle version 12.1.0.x.x	== Oracle.dataaccess.dll 4.121.x.x"),re=f(),D=s("p"),Me=r("When it comes to Oracle database connectivity:"),ne=f(),w=s("ul"),X=s("li"),Ue=r("a newer client should be able to connect to an older database"),Fe=f(),j=s("li"),Ve=r("an older client may not be able to connect to a newer database"),ce=f(),u=s("p"),qe=r("In this case the client is the oracle.dataaccess.dll library used by BizTalk, aligned to Oracle database 12.1."),Ke=s("br"),Xe=r(`
Well that\u2019s OK then, because our target servers are running Oracle 11.2 which is older.`),je=s("br"),Je=r(`
At the time of writing there are 3 download options from Oracle\u2019s site:`),fe=f(),v=s("ul"),J=s("li"),Qe=r("DB version 11gR2  11.2.0.3.20"),Ye=f(),Q=s("li"),Ze=r("DB version 12cR1  12.1.0.2.4		(closest match, only differs by minor version)"),$e=f(),Y=s("li"),ge=r("DB version 12cR2  12.2.0.1.0"),pe=f(),z=s("h3"),et=r("Installation"),de=f(),S=s("p"),tt=r("After installation we end up with the following GACced assemblies:"),ue=f(),O=s("pre"),ve=f(),N=s("p"),lt=r("The last of these provides an assembly bindingRedirect:"),be=f(),x=s("pre"),me=f(),E=s("p"),at=r("Great, so BizTalk\u2019s reference to oracle.dataaccess.dll 4.121.1.0 will resolve to 4.121.4.0 and all should be fine."),st=s("br"),it=r(`
Indeed it was.`),_e=f(),y=s("p"),ot=r("I\u2019m glad I spent the time investigating this, luckily we didn\u2019t have to follow "),B=s("a"),rt=r("Sandro Pereira\u2019s advice"),nt=r("."),he=f(),W=s("h3"),ct=r("Testing"),we=f(),m=s("p"),ft=r(`After installation we have new entries in the %PATH% environment variable:
`),Z=s("code"),pt=r("C:\\oracle\\product\\12.1.0\\client_1"),dt=f(),$=s("code"),ut=r("C:\\oracle\\product\\12.1.0\\client_1\\bin"),Ee=f(),A=s("p"),vt=r(`listed before the server installation:
`),g=s("code"),bt=r("C:\\oraclexe\\app\\oracle\\product\\11.2.0\\server\\bin"),ye=f(),G=s("p"),mt=r("This means that the client config (TNSNames.ora etc) will be used."),ke=f(),b=s("p"),_t=r("This is important for us to know."),ht=s("br"),wt=r(`
Our automated system tests against a local XE 11gR2 database (an empty copy of target systems).`),Et=s("br"),yt=r(`
We\u2019d like to be sure that BizTalk, our automated deployment scripts and Systests use the same client versions and configuration where possible.`),this.h()},l(e){d=i(e,"P",{});var a=n(d);Ae=c(a,"I was recently involved in an upgrade from BizTalk 2013 to BizTalk 2016."),Ie=i(a,"BR",{}),Pe=c(a,`
After upgrade all of our SpecFlow system tests started failing.`),a.forEach(t),le=p(e),P=i(e,"P",{});var xt=n(P);Ce=c(xt,"The error manifests itself in the Event Viewer Application Logs as:"),xt.forEach(t),ae=p(e),k=i(e,"PRE",{class:!0});var $t=n(k);$t.forEach(t),se=p(e),C=i(e,"H3",{});var Bt=n(C);Re=c(Bt,"Dependencies"),Bt.forEach(t),ie=p(e),R=i(e,"P",{});var At=n(R);Le=c(At,"So I dug into this in order to understand the problem and how to fix it, it turns out that:"),At.forEach(t),oe=p(e),_=i(e,"UL",{});var Te=n(_);h=i(Te,"LI",{});var ee=n(h);De=c(ee,"Biztalk 2013 has a dependency on "),T=i(ee,"A",{href:!0,rel:!0});var It=n(T);ze=c(It,"Oracle Data Provider for .NET"),It.forEach(t),Se=c(ee," version 11.2.  "),F=i(ee,"UL",{});var Pt=n(F);V=i(Pt,"LI",{});var Ct=n(V);Ne=c(Ct,"Oracle version 11.2.0.x.x == Oracle.dataaccess.dll 4.112.x.x"),Ct.forEach(t),Pt.forEach(t),ee.forEach(t),We=p(Te),L=i(Te,"LI",{});var kt=n(L);Ge=c(kt,"BizTalk 2016 has the same dependency but on Oracle version 12.1."),q=i(kt,"UL",{});var Rt=n(q);K=i(Rt,"LI",{});var Lt=n(K);He=c(Lt,"Oracle version 12.1.0.x.x	== Oracle.dataaccess.dll 4.121.x.x"),Lt.forEach(t),Rt.forEach(t),kt.forEach(t),Te.forEach(t),re=p(e),D=i(e,"P",{});var Dt=n(D);Me=c(Dt,"When it comes to Oracle database connectivity:"),Dt.forEach(t),ne=p(e),w=i(e,"UL",{});var Oe=n(w);X=i(Oe,"LI",{});var zt=n(X);Ue=c(zt,"a newer client should be able to connect to an older database"),zt.forEach(t),Fe=p(Oe),j=i(Oe,"LI",{});var St=n(j);Ve=c(St,"an older client may not be able to connect to a newer database"),St.forEach(t),Oe.forEach(t),ce=p(e),u=i(e,"P",{});var H=n(u);qe=c(H,"In this case the client is the oracle.dataaccess.dll library used by BizTalk, aligned to Oracle database 12.1."),Ke=i(H,"BR",{}),Xe=c(H,`
Well that\u2019s OK then, because our target servers are running Oracle 11.2 which is older.`),je=i(H,"BR",{}),Je=c(H,`
At the time of writing there are 3 download options from Oracle\u2019s site:`),H.forEach(t),fe=p(e),v=i(e,"UL",{});var M=n(v);J=i(M,"LI",{});var Nt=n(J);Qe=c(Nt,"DB version 11gR2  11.2.0.3.20"),Nt.forEach(t),Ye=p(M),Q=i(M,"LI",{});var Wt=n(Q);Ze=c(Wt,"DB version 12cR1  12.1.0.2.4		(closest match, only differs by minor version)"),Wt.forEach(t),$e=p(M),Y=i(M,"LI",{});var Gt=n(Y);ge=c(Gt,"DB version 12cR2  12.2.0.1.0"),Gt.forEach(t),M.forEach(t),pe=p(e),z=i(e,"H3",{});var Ht=n(z);et=c(Ht,"Installation"),Ht.forEach(t),de=p(e),S=i(e,"P",{});var Mt=n(S);tt=c(Mt,"After installation we end up with the following GACced assemblies:"),Mt.forEach(t),ue=p(e),O=i(e,"PRE",{class:!0});var gt=n(O);gt.forEach(t),ve=p(e),N=i(e,"P",{});var Ut=n(N);lt=c(Ut,"The last of these provides an assembly bindingRedirect:"),Ut.forEach(t),be=p(e),x=i(e,"PRE",{class:!0});var el=n(x);el.forEach(t),me=p(e),E=i(e,"P",{});var xe=n(E);at=c(xe,"Great, so BizTalk\u2019s reference to oracle.dataaccess.dll 4.121.1.0 will resolve to 4.121.4.0 and all should be fine."),st=i(xe,"BR",{}),it=c(xe,`
Indeed it was.`),xe.forEach(t),_e=p(e),y=i(e,"P",{});var Be=n(y);ot=c(Be,"I\u2019m glad I spent the time investigating this, luckily we didn\u2019t have to follow "),B=i(Be,"A",{href:!0,rel:!0});var Ft=n(B);rt=c(Ft,"Sandro Pereira\u2019s advice"),Ft.forEach(t),nt=c(Be,"."),Be.forEach(t),he=p(e),W=i(e,"H3",{});var Vt=n(W);ct=c(Vt,"Testing"),Vt.forEach(t),we=p(e),m=i(e,"P",{});var te=n(m);ft=c(te,`After installation we have new entries in the %PATH% environment variable:
`),Z=i(te,"CODE",{});var qt=n(Z);pt=c(qt,"C:\\oracle\\product\\12.1.0\\client_1"),qt.forEach(t),dt=p(te),$=i(te,"CODE",{});var Kt=n($);ut=c(Kt,"C:\\oracle\\product\\12.1.0\\client_1\\bin"),Kt.forEach(t),te.forEach(t),Ee=p(e),A=i(e,"P",{});var Tt=n(A);vt=c(Tt,`listed before the server installation:
`),g=i(Tt,"CODE",{});var Xt=n(g);bt=c(Xt,"C:\\oraclexe\\app\\oracle\\product\\11.2.0\\server\\bin"),Xt.forEach(t),Tt.forEach(t),ye=p(e),G=i(e,"P",{});var jt=n(G);mt=c(jt,"This means that the client config (TNSNames.ora etc) will be used."),jt.forEach(t),ke=p(e),b=i(e,"P",{});var U=n(b);_t=c(U,"This is important for us to know."),ht=i(U,"BR",{}),wt=c(U,`
Our automated system tests against a local XE 11gR2 database (an empty copy of target systems).`),Et=i(U,"BR",{}),yt=c(U,`
We\u2019d like to be sure that BizTalk, our automated deployment scripts and Systests use the same client versions and configuration where possible.`),U.forEach(t),this.h()},h(){I(k,"class","language-undefined"),I(T,"href","https://www.oracle.com/technetwork/topics/dotnet/index-085163.html"),I(T,"rel","nofollow"),I(O,"class","language-undefined"),I(x,"class","language-xml"),I(B,"href","https://blog.sandro-pereira.com/2017/10/05/biztalk-server-2016-could-not-load-file-or-assembly-oracle-dataaccess-version-or-one-of-its-dependencies/"),I(B,"rel","nofollow")},m(e,a){o(e,d,a),l(d,Ae),l(d,Ie),l(d,Pe),o(e,le,a),o(e,P,a),l(P,Ce),o(e,ae,a),o(e,k,a),k.innerHTML=Qt,o(e,se,a),o(e,C,a),l(C,Re),o(e,ie,a),o(e,R,a),l(R,Le),o(e,oe,a),o(e,_,a),l(_,h),l(h,De),l(h,T),l(T,ze),l(h,Se),l(h,F),l(F,V),l(V,Ne),l(_,We),l(_,L),l(L,Ge),l(L,q),l(q,K),l(K,He),o(e,re,a),o(e,D,a),l(D,Me),o(e,ne,a),o(e,w,a),l(w,X),l(X,Ue),l(w,Fe),l(w,j),l(j,Ve),o(e,ce,a),o(e,u,a),l(u,qe),l(u,Ke),l(u,Xe),l(u,je),l(u,Je),o(e,fe,a),o(e,v,a),l(v,J),l(J,Qe),l(v,Ye),l(v,Q),l(Q,Ze),l(v,$e),l(v,Y),l(Y,ge),o(e,pe,a),o(e,z,a),l(z,et),o(e,de,a),o(e,S,a),l(S,tt),o(e,ue,a),o(e,O,a),O.innerHTML=Yt,o(e,ve,a),o(e,N,a),l(N,lt),o(e,be,a),o(e,x,a),x.innerHTML=Zt,o(e,me,a),o(e,E,a),l(E,at),l(E,st),l(E,it),o(e,_e,a),o(e,y,a),l(y,ot),l(y,B),l(B,rt),l(y,nt),o(e,he,a),o(e,W,a),l(W,ct),o(e,we,a),o(e,m,a),l(m,ft),l(m,Z),l(Z,pt),l(m,dt),l(m,$),l($,ut),o(e,Ee,a),o(e,A,a),l(A,vt),l(A,g),l(g,bt),o(e,ye,a),o(e,G,a),l(G,mt),o(e,ke,a),o(e,b,a),l(b,_t),l(b,ht),l(b,wt),l(b,Et),l(b,yt)},p:Ot,i:Ot,o:Ot,d(e){e&&t(d),e&&t(le),e&&t(P),e&&t(ae),e&&t(k),e&&t(se),e&&t(C),e&&t(ie),e&&t(R),e&&t(oe),e&&t(_),e&&t(re),e&&t(D),e&&t(ne),e&&t(w),e&&t(ce),e&&t(u),e&&t(fe),e&&t(v),e&&t(pe),e&&t(z),e&&t(de),e&&t(S),e&&t(ue),e&&t(O),e&&t(ve),e&&t(N),e&&t(be),e&&t(x),e&&t(me),e&&t(E),e&&t(_e),e&&t(y),e&&t(he),e&&t(W),e&&t(we),e&&t(m),e&&t(Ee),e&&t(A),e&&t(ye),e&&t(G),e&&t(ke),e&&t(b)}}}class ol extends tl{constructor(d){super();ll(this,d,null,sl,al,{})}}export{ol as default};
