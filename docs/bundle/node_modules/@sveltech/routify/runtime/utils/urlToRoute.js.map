{"version":3,"file":"urlToRoute.js","sources":["../../../../../../../node_modules/@sveltech/routify/runtime/utils/urlToRoute.js"],"sourcesContent":["import { get } from 'svelte/store'\nimport * as stores from '../store'\nimport config from '../../runtime.config'\n\n/**\n * @param {string} url \n * @return {ClientNode}\n */\nexport function urlToRoute(url) {\n    /** @type {RouteNode[]} */\n    const routes = get(stores.routes)\n    const basepath = get(stores.basepath)\n    const route = routes.find(route => url.match(`^${basepath}${route.regex}`))\n    if (!route)\n        throw new Error(\n            `Route could not be found for \"${url}\".`\n        )\n\n    const [, base] = url.match(`^(${basepath})${route.regex}`)\n    const path = url.slice(base.length)\n\n    if (config.queryHandler)\n        route.params = config.queryHandler.parse(window.location.search)\n\n    if (route.paramKeys) {\n        const layouts = layoutByPos(route.layouts)\n        const fragments = path.split('/').filter(Boolean)\n        const routeProps = getRouteProps(route.path)\n\n        routeProps.forEach((prop, i) => {\n            if (prop) {\n                route.params[prop] = fragments[i]\n                if (layouts[i]) layouts[i].param = { [prop]: fragments[i] }\n                else route.param = { [prop]: fragments[i] }\n            }\n        })\n    }\n\n    route.leftover = url.replace(new RegExp(base + route.regex), '')\n\n    return route\n}\n\n\n/**\n * @param {array} layouts\n */\nfunction layoutByPos(layouts) {\n    const arr = []\n    layouts.forEach(layout => {\n        arr[layout.path.split('/').filter(Boolean).length - 1] = layout\n    })\n    return arr\n}\n\n\n/**\n * @param {string} url\n */\nfunction getRouteProps(url) {\n    return url\n        .split('/')\n        .filter(Boolean)\n        .map(f => f.match(/\\:(.+)/))\n        .map(f => f && f[1])\n}\n"],"names":["urlToRoute","url","routes","get","stores.routes","basepath","stores.basepath","route","find","match","regex","Error","base","path","slice","length","config","queryHandler","params","parse","window","location","search","paramKeys","layouts","arr","forEach","layout","split","filter","Boolean","layoutByPos","fragments","map","f","getRouteProps","prop","i","param","[object Object]","leftover","replace","RegExp"],"mappings":"qKAQO,SAASA,EAAWC,GAEvB,MAAMC,EAASC,EAAIC,GACbC,EAAWF,EAAIG,GACfC,EAAQL,EAAOM,MAAKD,GAASN,EAAIQ,MAAM,IAAIJ,IAAWE,EAAMG,WAClE,IAAKH,EACD,MAAM,IAAII,MACN,iCAAiCV,OAGzC,OAASW,GAAQX,EAAIQ,MAAM,KAAKJ,KAAYE,EAAMG,SAC5CG,EAAOZ,EAAIa,MAAMF,EAAKG,QAK5B,GAHIC,EAAOC,eACPV,EAAMW,OAASF,EAAOC,aAAaE,MAAMC,OAAOC,SAASC,SAEzDf,EAAMgB,UAAW,CACjB,MAAMC,EAsBd,SAAqBA,GACjB,MAAMC,EAAM,GAIZ,OAHAD,EAAQE,SAAQC,IACZF,EAAIE,EAAOd,KAAKe,MAAM,KAAKC,OAAOC,SAASf,OAAS,GAAKY,KAEtDF,EA3BaM,CAAYxB,EAAMiB,SAC5BQ,EAAYnB,EAAKe,MAAM,KAAKC,OAAOC,UAiCjD,SAAuB7B,GACnB,OAAOA,EACF2B,MAAM,KACNC,OAAOC,SACPG,KAAIC,GAAKA,EAAEzB,MAAM,YACjBwB,KAAIC,GAAKA,GAAKA,EAAE,MArCEC,CAAc5B,EAAMM,MAE5Ba,SAAQ,CAACU,EAAMC,KAClBD,IACA7B,EAAMW,OAAOkB,GAAQJ,EAAUK,GAC3Bb,EAAQa,GAAIb,EAAQa,GAAGC,MAAQ,CAAEC,CAACH,GAAOJ,EAAUK,IAClD9B,EAAM+B,MAAQ,CAAEC,CAACH,GAAOJ,EAAUK,QAOnD,OAFA9B,EAAMiC,SAAWvC,EAAIwC,QAAQ,IAAIC,OAAO9B,EAAOL,EAAMG,OAAQ,IAEtDH"}